<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="435"><g><title>[unknown] (1 samples, 0.23%)</title><rect x="15.4023%" y="741" width="0.2299%" height="15" fill="rgb(227,0,7)" fg:x="67" fg:w="1"/><text x="15.6523%" y="751.50"></text></g><g><title>__GI__setjmp (1 samples, 0.23%)</title><rect x="18.6207%" y="725" width="0.2299%" height="15" fill="rgb(217,0,24)" fg:x="81" fg:w="1"/><text x="18.8707%" y="735.50"></text></g><g><title>__malloc_arena_thread_freeres (1 samples, 0.23%)</title><rect x="18.8506%" y="725" width="0.2299%" height="15" fill="rgb(221,193,54)" fg:x="82" fg:w="1"/><text x="19.1006%" y="735.50"></text></g><g><title>__sigaltstack (1 samples, 0.23%)</title><rect x="19.0805%" y="645" width="0.2299%" height="15" fill="rgb(248,212,6)" fg:x="83" fg:w="1"/><text x="19.3305%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="19.0805%" y="629" width="0.2299%" height="15" fill="rgb(208,68,35)" fg:x="83" fg:w="1"/><text x="19.3305%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="20.0000%" y="357" width="0.2299%" height="15" fill="rgb(232,128,0)" fg:x="87" fg:w="1"/><text x="20.2500%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.46%)</title><rect x="20.0000%" y="453" width="0.4598%" height="15" fill="rgb(207,160,47)" fg:x="87" fg:w="2"/><text x="20.2500%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.46%)</title><rect x="20.0000%" y="437" width="0.4598%" height="15" fill="rgb(228,23,34)" fg:x="87" fg:w="2"/><text x="20.2500%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.46%)</title><rect x="20.0000%" y="421" width="0.4598%" height="15" fill="rgb(218,30,26)" fg:x="87" fg:w="2"/><text x="20.2500%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.46%)</title><rect x="20.0000%" y="405" width="0.4598%" height="15" fill="rgb(220,122,19)" fg:x="87" fg:w="2"/><text x="20.2500%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.46%)</title><rect x="20.0000%" y="389" width="0.4598%" height="15" fill="rgb(250,228,42)" fg:x="87" fg:w="2"/><text x="20.2500%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.46%)</title><rect x="20.0000%" y="373" width="0.4598%" height="15" fill="rgb(240,193,28)" fg:x="87" fg:w="2"/><text x="20.2500%" y="383.50"></text></g><g><title>__rust_alloc (1 samples, 0.23%)</title><rect x="20.2299%" y="357" width="0.2299%" height="15" fill="rgb(216,20,37)" fg:x="88" fg:w="1"/><text x="20.4799%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 1.15%)</title><rect x="20.0000%" y="533" width="1.1494%" height="15" fill="rgb(206,188,39)" fg:x="87" fg:w="5"/><text x="20.2500%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 1.15%)</title><rect x="20.0000%" y="517" width="1.1494%" height="15" fill="rgb(217,207,13)" fg:x="87" fg:w="5"/><text x="20.2500%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 1.15%)</title><rect x="20.0000%" y="501" width="1.1494%" height="15" fill="rgb(231,73,38)" fg:x="87" fg:w="5"/><text x="20.2500%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 1.15%)</title><rect x="20.0000%" y="485" width="1.1494%" height="15" fill="rgb(225,20,46)" fg:x="87" fg:w="5"/><text x="20.2500%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 1.15%)</title><rect x="20.0000%" y="469" width="1.1494%" height="15" fill="rgb(210,31,41)" fg:x="87" fg:w="5"/><text x="20.2500%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.69%)</title><rect x="20.4598%" y="453" width="0.6897%" height="15" fill="rgb(221,200,47)" fg:x="89" fg:w="3"/><text x="20.7098%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.69%)</title><rect x="20.4598%" y="437" width="0.6897%" height="15" fill="rgb(226,26,5)" fg:x="89" fg:w="3"/><text x="20.7098%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.69%)</title><rect x="20.4598%" y="421" width="0.6897%" height="15" fill="rgb(249,33,26)" fg:x="89" fg:w="3"/><text x="20.7098%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.46%)</title><rect x="21.1494%" y="533" width="0.4598%" height="15" fill="rgb(235,183,28)" fg:x="92" fg:w="2"/><text x="21.3994%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.23%)</title><rect x="21.3793%" y="517" width="0.2299%" height="15" fill="rgb(221,5,38)" fg:x="93" fg:w="1"/><text x="21.6293%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.23%)</title><rect x="21.3793%" y="501" width="0.2299%" height="15" fill="rgb(247,18,42)" fg:x="93" fg:w="1"/><text x="21.6293%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="21.3793%" y="485" width="0.2299%" height="15" fill="rgb(241,131,45)" fg:x="93" fg:w="1"/><text x="21.6293%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.23%)</title><rect x="21.3793%" y="469" width="0.2299%" height="15" fill="rgb(249,31,29)" fg:x="93" fg:w="1"/><text x="21.6293%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.23%)</title><rect x="21.3793%" y="453" width="0.2299%" height="15" fill="rgb(225,111,53)" fg:x="93" fg:w="1"/><text x="21.6293%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.23%)</title><rect x="21.3793%" y="437" width="0.2299%" height="15" fill="rgb(238,160,17)" fg:x="93" fg:w="1"/><text x="21.6293%" y="447.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.23%)</title><rect x="21.3793%" y="421" width="0.2299%" height="15" fill="rgb(214,148,48)" fg:x="93" fg:w="1"/><text x="21.6293%" y="431.50"></text></g><g><title>_int_realloc (1 samples, 0.23%)</title><rect x="21.3793%" y="405" width="0.2299%" height="15" fill="rgb(232,36,49)" fg:x="93" fg:w="1"/><text x="21.6293%" y="415.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="21.3793%" y="389" width="0.2299%" height="15" fill="rgb(209,103,24)" fg:x="93" fg:w="1"/><text x="21.6293%" y="399.50"></text></g><g><title>malloc_consolidate (1 samples, 0.23%)</title><rect x="21.3793%" y="373" width="0.2299%" height="15" fill="rgb(229,88,8)" fg:x="93" fg:w="1"/><text x="21.6293%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;(u32,alloc::string::String)&gt;&gt;&gt; (4 samples, 0.92%)</title><rect x="21.6092%" y="533" width="0.9195%" height="15" fill="rgb(213,181,19)" fg:x="94" fg:w="4"/><text x="21.8592%" y="543.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.92%)</title><rect x="21.6092%" y="517" width="0.9195%" height="15" fill="rgb(254,191,54)" fg:x="94" fg:w="4"/><text x="21.8592%" y="527.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (4 samples, 0.92%)</title><rect x="21.6092%" y="501" width="0.9195%" height="15" fill="rgb(241,83,37)" fg:x="94" fg:w="4"/><text x="21.8592%" y="511.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.23%)</title><rect x="22.2989%" y="485" width="0.2299%" height="15" fill="rgb(233,36,39)" fg:x="97" fg:w="1"/><text x="22.5489%" y="495.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (1 samples, 0.23%)</title><rect x="22.2989%" y="469" width="0.2299%" height="15" fill="rgb(226,3,54)" fg:x="97" fg:w="1"/><text x="22.5489%" y="479.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (1 samples, 0.23%)</title><rect x="22.2989%" y="453" width="0.2299%" height="15" fill="rgb(245,192,40)" fg:x="97" fg:w="1"/><text x="22.5489%" y="463.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.23%)</title><rect x="22.2989%" y="437" width="0.2299%" height="15" fill="rgb(238,167,29)" fg:x="97" fg:w="1"/><text x="22.5489%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.23%)</title><rect x="22.2989%" y="421" width="0.2299%" height="15" fill="rgb(232,182,51)" fg:x="97" fg:w="1"/><text x="22.5489%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.23%)</title><rect x="26.2069%" y="485" width="0.2299%" height="15" fill="rgb(231,60,39)" fg:x="114" fg:w="1"/><text x="26.4569%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.23%)</title><rect x="26.2069%" y="469" width="0.2299%" height="15" fill="rgb(208,69,12)" fg:x="114" fg:w="1"/><text x="26.4569%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;parking_lot_core::parking_lot::ThreadData&gt;&gt; (1 samples, 0.23%)</title><rect x="26.4368%" y="453" width="0.2299%" height="15" fill="rgb(235,93,37)" fg:x="115" fg:w="1"/><text x="26.6868%" y="463.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (8 samples, 1.84%)</title><rect x="27.1264%" y="437" width="1.8391%" height="15" fill="rgb(213,116,39)" fg:x="118" fg:w="8"/><text x="27.3764%" y="447.50">&lt;..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (8 samples, 1.84%)</title><rect x="27.1264%" y="421" width="1.8391%" height="15" fill="rgb(222,207,29)" fg:x="118" fg:w="8"/><text x="27.3764%" y="431.50">p..</text></g><g><title>syscall (8 samples, 1.84%)</title><rect x="27.1264%" y="405" width="1.8391%" height="15" fill="rgb(206,96,30)" fg:x="118" fg:w="8"/><text x="27.3764%" y="415.50">s..</text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.23%)</title><rect x="28.9655%" y="437" width="0.2299%" height="15" fill="rgb(218,138,4)" fg:x="126" fg:w="1"/><text x="29.2155%" y="447.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.23%)</title><rect x="28.9655%" y="421" width="0.2299%" height="15" fill="rgb(250,191,14)" fg:x="126" fg:w="1"/><text x="29.2155%" y="431.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (1 samples, 0.23%)</title><rect x="28.9655%" y="405" width="0.2299%" height="15" fill="rgb(239,60,40)" fg:x="126" fg:w="1"/><text x="29.2155%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (13 samples, 2.99%)</title><rect x="26.6667%" y="453" width="2.9885%" height="15" fill="rgb(206,27,48)" fg:x="116" fg:w="13"/><text x="26.9167%" y="463.50">par..</text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (2 samples, 0.46%)</title><rect x="29.1954%" y="437" width="0.4598%" height="15" fill="rgb(225,35,8)" fg:x="127" fg:w="2"/><text x="29.4454%" y="447.50"></text></g><g><title>parking_lot_core::parking_lot::HashTable::new (1 samples, 0.23%)</title><rect x="29.6552%" y="309" width="0.2299%" height="15" fill="rgb(250,213,24)" fg:x="129" fg:w="1"/><text x="29.9052%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="29.6552%" y="293" width="0.2299%" height="15" fill="rgb(247,123,22)" fg:x="129" fg:w="1"/><text x="29.9052%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="29.6552%" y="277" width="0.2299%" height="15" fill="rgb(231,138,38)" fg:x="129" fg:w="1"/><text x="29.9052%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="29.6552%" y="261" width="0.2299%" height="15" fill="rgb(231,145,46)" fg:x="129" fg:w="1"/><text x="29.9052%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="29.6552%" y="245" width="0.2299%" height="15" fill="rgb(251,118,11)" fg:x="129" fg:w="1"/><text x="29.9052%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.23%)</title><rect x="29.6552%" y="229" width="0.2299%" height="15" fill="rgb(217,147,25)" fg:x="129" fg:w="1"/><text x="29.9052%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="29.6552%" y="213" width="0.2299%" height="15" fill="rgb(247,81,37)" fg:x="129" fg:w="1"/><text x="29.9052%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="29.6552%" y="197" width="0.2299%" height="15" fill="rgb(209,12,38)" fg:x="129" fg:w="1"/><text x="29.9052%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.23%)</title><rect x="29.6552%" y="181" width="0.2299%" height="15" fill="rgb(227,1,9)" fg:x="129" fg:w="1"/><text x="29.9052%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.23%)</title><rect x="29.6552%" y="165" width="0.2299%" height="15" fill="rgb(248,47,43)" fg:x="129" fg:w="1"/><text x="29.9052%" y="175.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.23%)</title><rect x="29.6552%" y="149" width="0.2299%" height="15" fill="rgb(221,10,30)" fg:x="129" fg:w="1"/><text x="29.9052%" y="159.50"></text></g><g><title>__posix_memalign (1 samples, 0.23%)</title><rect x="29.6552%" y="133" width="0.2299%" height="15" fill="rgb(210,229,1)" fg:x="129" fg:w="1"/><text x="29.9052%" y="143.50"></text></g><g><title>_int_memalign (1 samples, 0.23%)</title><rect x="29.6552%" y="117" width="0.2299%" height="15" fill="rgb(222,148,37)" fg:x="129" fg:w="1"/><text x="29.9052%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="29.6552%" y="101" width="0.2299%" height="15" fill="rgb(234,67,33)" fg:x="129" fg:w="1"/><text x="29.9052%" y="111.50"></text></g><g><title>malloc_consolidate (1 samples, 0.23%)</title><rect x="29.6552%" y="85" width="0.2299%" height="15" fill="rgb(247,98,35)" fg:x="129" fg:w="1"/><text x="29.9052%" y="95.50"></text></g><g><title>_int_memalign (1 samples, 0.23%)</title><rect x="29.8851%" y="85" width="0.2299%" height="15" fill="rgb(247,138,52)" fg:x="130" fg:w="1"/><text x="30.1351%" y="95.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="29.8851%" y="69" width="0.2299%" height="15" fill="rgb(213,79,30)" fg:x="130" fg:w="1"/><text x="30.1351%" y="79.50"></text></g><g><title>malloc_consolidate (1 samples, 0.23%)</title><rect x="29.8851%" y="53" width="0.2299%" height="15" fill="rgb(246,177,23)" fg:x="130" fg:w="1"/><text x="30.1351%" y="63.50"></text></g><g><title>parking_lot_core::parking_lot::park (17 samples, 3.91%)</title><rect x="26.4368%" y="485" width="3.9080%" height="15" fill="rgb(230,62,27)" fg:x="115" fg:w="17"/><text x="26.6868%" y="495.50">park..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (17 samples, 3.91%)</title><rect x="26.4368%" y="469" width="3.9080%" height="15" fill="rgb(216,154,8)" fg:x="115" fg:w="17"/><text x="26.6868%" y="479.50">park..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.69%)</title><rect x="29.6552%" y="453" width="0.6897%" height="15" fill="rgb(244,35,45)" fg:x="129" fg:w="3"/><text x="29.9052%" y="463.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (3 samples, 0.69%)</title><rect x="29.6552%" y="437" width="0.6897%" height="15" fill="rgb(251,115,12)" fg:x="129" fg:w="3"/><text x="29.9052%" y="447.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (3 samples, 0.69%)</title><rect x="29.6552%" y="421" width="0.6897%" height="15" fill="rgb(240,54,50)" fg:x="129" fg:w="3"/><text x="29.9052%" y="431.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (3 samples, 0.69%)</title><rect x="29.6552%" y="405" width="0.6897%" height="15" fill="rgb(233,84,52)" fg:x="129" fg:w="3"/><text x="29.9052%" y="415.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (3 samples, 0.69%)</title><rect x="29.6552%" y="389" width="0.6897%" height="15" fill="rgb(207,117,47)" fg:x="129" fg:w="3"/><text x="29.9052%" y="399.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit::{{closure}} (3 samples, 0.69%)</title><rect x="29.6552%" y="373" width="0.6897%" height="15" fill="rgb(249,43,39)" fg:x="129" fg:w="3"/><text x="29.9052%" y="383.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__init (3 samples, 0.69%)</title><rect x="29.6552%" y="357" width="0.6897%" height="15" fill="rgb(209,38,44)" fg:x="129" fg:w="3"/><text x="29.9052%" y="367.50"></text></g><g><title>parking_lot_core::parking_lot::ThreadData::new (3 samples, 0.69%)</title><rect x="29.6552%" y="341" width="0.6897%" height="15" fill="rgb(236,212,23)" fg:x="129" fg:w="3"/><text x="29.9052%" y="351.50"></text></g><g><title>parking_lot_core::parking_lot::grow_hashtable (3 samples, 0.69%)</title><rect x="29.6552%" y="325" width="0.6897%" height="15" fill="rgb(242,79,21)" fg:x="129" fg:w="3"/><text x="29.9052%" y="335.50"></text></g><g><title>parking_lot_core::parking_lot::get_hashtable (2 samples, 0.46%)</title><rect x="29.8851%" y="309" width="0.4598%" height="15" fill="rgb(211,96,35)" fg:x="130" fg:w="2"/><text x="30.1351%" y="319.50"></text></g><g><title>parking_lot_core::parking_lot::create_hashtable (2 samples, 0.46%)</title><rect x="29.8851%" y="293" width="0.4598%" height="15" fill="rgb(253,215,40)" fg:x="130" fg:w="2"/><text x="30.1351%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::HashTable::new (2 samples, 0.46%)</title><rect x="29.8851%" y="277" width="0.4598%" height="15" fill="rgb(211,81,21)" fg:x="130" fg:w="2"/><text x="30.1351%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.46%)</title><rect x="29.8851%" y="261" width="0.4598%" height="15" fill="rgb(208,190,38)" fg:x="130" fg:w="2"/><text x="30.1351%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.46%)</title><rect x="29.8851%" y="245" width="0.4598%" height="15" fill="rgb(235,213,38)" fg:x="130" fg:w="2"/><text x="30.1351%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.46%)</title><rect x="29.8851%" y="229" width="0.4598%" height="15" fill="rgb(237,122,38)" fg:x="130" fg:w="2"/><text x="30.1351%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.46%)</title><rect x="29.8851%" y="213" width="0.4598%" height="15" fill="rgb(244,218,35)" fg:x="130" fg:w="2"/><text x="30.1351%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.46%)</title><rect x="29.8851%" y="197" width="0.4598%" height="15" fill="rgb(240,68,47)" fg:x="130" fg:w="2"/><text x="30.1351%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.46%)</title><rect x="29.8851%" y="181" width="0.4598%" height="15" fill="rgb(210,16,53)" fg:x="130" fg:w="2"/><text x="30.1351%" y="191.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.46%)</title><rect x="29.8851%" y="165" width="0.4598%" height="15" fill="rgb(235,124,12)" fg:x="130" fg:w="2"/><text x="30.1351%" y="175.50"></text></g><g><title>__rdl_alloc (2 samples, 0.46%)</title><rect x="29.8851%" y="149" width="0.4598%" height="15" fill="rgb(224,169,11)" fg:x="130" fg:w="2"/><text x="30.1351%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.46%)</title><rect x="29.8851%" y="133" width="0.4598%" height="15" fill="rgb(250,166,2)" fg:x="130" fg:w="2"/><text x="30.1351%" y="143.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (2 samples, 0.46%)</title><rect x="29.8851%" y="117" width="0.4598%" height="15" fill="rgb(242,216,29)" fg:x="130" fg:w="2"/><text x="30.1351%" y="127.50"></text></g><g><title>__posix_memalign (2 samples, 0.46%)</title><rect x="29.8851%" y="101" width="0.4598%" height="15" fill="rgb(230,116,27)" fg:x="130" fg:w="2"/><text x="30.1351%" y="111.50"></text></g><g><title>memalign_hook_ini (1 samples, 0.23%)</title><rect x="30.1149%" y="85" width="0.2299%" height="15" fill="rgb(228,99,48)" fg:x="131" fg:w="1"/><text x="30.3649%" y="95.50"></text></g><g><title>_int_memalign (1 samples, 0.23%)</title><rect x="30.1149%" y="69" width="0.2299%" height="15" fill="rgb(253,11,6)" fg:x="131" fg:w="1"/><text x="30.3649%" y="79.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="30.1149%" y="53" width="0.2299%" height="15" fill="rgb(247,143,39)" fg:x="131" fg:w="1"/><text x="30.3649%" y="63.50"></text></g><g><title>malloc_consolidate (1 samples, 0.23%)</title><rect x="30.1149%" y="37" width="0.2299%" height="15" fill="rgb(236,97,10)" fg:x="131" fg:w="1"/><text x="30.3649%" y="47.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (35 samples, 8.05%)</title><rect x="22.5287%" y="533" width="8.0460%" height="15" fill="rgb(233,208,19)" fg:x="98" fg:w="35"/><text x="22.7787%" y="543.50">lock_api::m..</text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (35 samples, 8.05%)</title><rect x="22.5287%" y="517" width="8.0460%" height="15" fill="rgb(216,164,2)" fg:x="98" fg:w="35"/><text x="22.7787%" y="527.50">&lt;parking_lo..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (29 samples, 6.67%)</title><rect x="23.9080%" y="501" width="6.6667%" height="15" fill="rgb(220,129,5)" fg:x="104" fg:w="29"/><text x="24.1580%" y="511.50">parking_l..</text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.23%)</title><rect x="30.3448%" y="485" width="0.2299%" height="15" fill="rgb(242,17,10)" fg:x="132" fg:w="1"/><text x="30.5948%" y="495.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (1 samples, 0.23%)</title><rect x="30.3448%" y="469" width="0.2299%" height="15" fill="rgb(242,107,0)" fg:x="132" fg:w="1"/><text x="30.5948%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.23%)</title><rect x="30.3448%" y="453" width="0.2299%" height="15" fill="rgb(251,28,31)" fg:x="132" fg:w="1"/><text x="30.5948%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.23%)</title><rect x="30.3448%" y="437" width="0.2299%" height="15" fill="rgb(233,223,10)" fg:x="132" fg:w="1"/><text x="30.5948%" y="447.50"></text></g><g><title>__GI___libc_free (1 samples, 0.23%)</title><rect x="30.8046%" y="405" width="0.2299%" height="15" fill="rgb(215,21,27)" fg:x="134" fg:w="1"/><text x="31.0546%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.46%)</title><rect x="30.8046%" y="501" width="0.4598%" height="15" fill="rgb(232,23,21)" fg:x="134" fg:w="2"/><text x="31.0546%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="30.8046%" y="485" width="0.4598%" height="15" fill="rgb(244,5,23)" fg:x="134" fg:w="2"/><text x="31.0546%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="30.8046%" y="469" width="0.4598%" height="15" fill="rgb(226,81,46)" fg:x="134" fg:w="2"/><text x="31.0546%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="30.8046%" y="453" width="0.4598%" height="15" fill="rgb(247,70,30)" fg:x="134" fg:w="2"/><text x="31.0546%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.46%)</title><rect x="30.8046%" y="437" width="0.4598%" height="15" fill="rgb(212,68,19)" fg:x="134" fg:w="2"/><text x="31.0546%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.46%)</title><rect x="30.8046%" y="421" width="0.4598%" height="15" fill="rgb(240,187,13)" fg:x="134" fg:w="2"/><text x="31.0546%" y="431.50"></text></g><g><title>__rust_dealloc (1 samples, 0.23%)</title><rect x="31.0345%" y="405" width="0.2299%" height="15" fill="rgb(223,113,26)" fg:x="135" fg:w="1"/><text x="31.2845%" y="415.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::digest_pad (3 samples, 0.69%)</title><rect x="31.4943%" y="389" width="0.6897%" height="15" fill="rgb(206,192,2)" fg:x="137" fg:w="3"/><text x="31.7443%" y="399.50"></text></g><g><title>block_buffer::set_zero (3 samples, 0.69%)</title><rect x="31.4943%" y="373" width="0.6897%" height="15" fill="rgb(241,108,4)" fg:x="137" fg:w="3"/><text x="31.7443%" y="383.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.69%)</title><rect x="31.4943%" y="357" width="0.6897%" height="15" fill="rgb(247,173,49)" fg:x="137" fg:w="3"/><text x="31.7443%" y="367.50"></text></g><g><title>__memset_avx2_unaligned_erms (3 samples, 0.69%)</title><rect x="31.4943%" y="341" width="0.6897%" height="15" fill="rgb(224,114,35)" fg:x="137" fg:w="3"/><text x="31.7443%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.23%)</title><rect x="32.4138%" y="325" width="0.2299%" height="15" fill="rgb(245,159,27)" fg:x="141" fg:w="1"/><text x="32.6638%" y="335.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.23%)</title><rect x="32.4138%" y="309" width="0.2299%" height="15" fill="rgb(245,172,44)" fg:x="141" fg:w="1"/><text x="32.6638%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.23%)</title><rect x="32.4138%" y="293" width="0.2299%" height="15" fill="rgb(236,23,11)" fg:x="141" fg:w="1"/><text x="32.6638%" y="303.50"></text></g><g><title>sha2::sha256::soft::add (1 samples, 0.23%)</title><rect x="32.6437%" y="309" width="0.2299%" height="15" fill="rgb(205,117,38)" fg:x="142" fg:w="1"/><text x="32.8937%" y="319.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.23%)</title><rect x="32.6437%" y="293" width="0.2299%" height="15" fill="rgb(237,72,25)" fg:x="142" fg:w="1"/><text x="32.8937%" y="303.50"></text></g><g><title>sha2::sha256::soft::or (2 samples, 0.46%)</title><rect x="32.8736%" y="261" width="0.4598%" height="15" fill="rgb(244,70,9)" fg:x="143" fg:w="2"/><text x="33.1236%" y="271.50"></text></g><g><title>sha2::sha256::soft::shl (1 samples, 0.23%)</title><rect x="33.3333%" y="261" width="0.2299%" height="15" fill="rgb(217,125,39)" fg:x="145" fg:w="1"/><text x="33.5833%" y="271.50"></text></g><g><title>sha2::sha256::soft::sha256msg1 (4 samples, 0.92%)</title><rect x="32.8736%" y="293" width="0.9195%" height="15" fill="rgb(235,36,10)" fg:x="143" fg:w="4"/><text x="33.1236%" y="303.50"></text></g><g><title>sha2::sha256::soft::sha256msg1::sigma0x4 (4 samples, 0.92%)</title><rect x="32.8736%" y="277" width="0.9195%" height="15" fill="rgb(251,123,47)" fg:x="143" fg:w="4"/><text x="33.1236%" y="287.50"></text></g><g><title>sha2::sha256::soft::xor (1 samples, 0.23%)</title><rect x="33.5632%" y="261" width="0.2299%" height="15" fill="rgb(221,13,13)" fg:x="146" fg:w="1"/><text x="33.8132%" y="271.50"></text></g><g><title>sha2::sha256::soft::schedule (10 samples, 2.30%)</title><rect x="32.8736%" y="309" width="2.2989%" height="15" fill="rgb(238,131,9)" fg:x="143" fg:w="10"/><text x="33.1236%" y="319.50">s..</text></g><g><title>sha2::sha256::soft::sha256msg2 (6 samples, 1.38%)</title><rect x="33.7931%" y="293" width="1.3793%" height="15" fill="rgb(211,50,8)" fg:x="147" fg:w="6"/><text x="34.0431%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (2 samples, 0.46%)</title><rect x="34.7126%" y="277" width="0.4598%" height="15" fill="rgb(245,182,24)" fg:x="151" fg:w="2"/><text x="34.9626%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (4 samples, 0.92%)</title><rect x="37.0115%" y="293" width="0.9195%" height="15" fill="rgb(242,14,37)" fg:x="161" fg:w="4"/><text x="37.2615%" y="303.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (30 samples, 6.90%)</title><rect x="31.2644%" y="485" width="6.8966%" height="15" fill="rgb(246,228,12)" fg:x="136" fg:w="30"/><text x="31.5144%" y="495.50">&lt;D as dig..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (30 samples, 6.90%)</title><rect x="31.2644%" y="469" width="6.8966%" height="15" fill="rgb(213,55,15)" fg:x="136" fg:w="30"/><text x="31.5144%" y="479.50">digest::f..</text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (30 samples, 6.90%)</title><rect x="31.2644%" y="453" width="6.8966%" height="15" fill="rgb(209,9,3)" fg:x="136" fg:w="30"/><text x="31.5144%" y="463.50">&lt;D as dig..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (30 samples, 6.90%)</title><rect x="31.2644%" y="437" width="6.8966%" height="15" fill="rgb(230,59,30)" fg:x="136" fg:w="30"/><text x="31.5144%" y="447.50">&lt;sha2::sh..</text></g><g><title>sha2::sha256::Engine256::finish (29 samples, 6.67%)</title><rect x="31.4943%" y="421" width="6.6667%" height="15" fill="rgb(209,121,21)" fg:x="137" fg:w="29"/><text x="31.7443%" y="431.50">sha2::sha..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (29 samples, 6.67%)</title><rect x="31.4943%" y="405" width="6.6667%" height="15" fill="rgb(220,109,13)" fg:x="137" fg:w="29"/><text x="31.7443%" y="415.50">block_buf..</text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (26 samples, 5.98%)</title><rect x="32.1839%" y="389" width="5.9770%" height="15" fill="rgb(232,18,1)" fg:x="140" fg:w="26"/><text x="32.4339%" y="399.50">sha2::sh..</text></g><g><title>sha2::sha256::compress256 (26 samples, 5.98%)</title><rect x="32.1839%" y="373" width="5.9770%" height="15" fill="rgb(215,41,42)" fg:x="140" fg:w="26"/><text x="32.4339%" y="383.50">sha2::sh..</text></g><g><title>sha2::sha256::x86::compress (26 samples, 5.98%)</title><rect x="32.1839%" y="357" width="5.9770%" height="15" fill="rgb(224,123,36)" fg:x="140" fg:w="26"/><text x="32.4339%" y="367.50">sha2::sh..</text></g><g><title>sha2::sha256::soft::compress (26 samples, 5.98%)</title><rect x="32.1839%" y="341" width="5.9770%" height="15" fill="rgb(240,125,3)" fg:x="140" fg:w="26"/><text x="32.4339%" y="351.50">sha2::sh..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (24 samples, 5.52%)</title><rect x="32.6437%" y="325" width="5.5172%" height="15" fill="rgb(205,98,50)" fg:x="142" fg:w="24"/><text x="32.8937%" y="335.50">sha2::s..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (13 samples, 2.99%)</title><rect x="35.1724%" y="309" width="2.9885%" height="15" fill="rgb(205,185,37)" fg:x="153" fg:w="13"/><text x="35.4224%" y="319.50">sha..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.23%)</title><rect x="37.9310%" y="293" width="0.2299%" height="15" fill="rgb(238,207,15)" fg:x="165" fg:w="1"/><text x="38.1810%" y="303.50"></text></g><g><title>alloc::string::String::reserve (2 samples, 0.46%)</title><rect x="38.6207%" y="389" width="0.4598%" height="15" fill="rgb(213,199,42)" fg:x="168" fg:w="2"/><text x="38.8707%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.46%)</title><rect x="38.6207%" y="373" width="0.4598%" height="15" fill="rgb(235,201,11)" fg:x="168" fg:w="2"/><text x="38.8707%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.46%)</title><rect x="38.6207%" y="357" width="0.4598%" height="15" fill="rgb(207,46,11)" fg:x="168" fg:w="2"/><text x="38.8707%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.46%)</title><rect x="38.6207%" y="341" width="0.4598%" height="15" fill="rgb(241,35,35)" fg:x="168" fg:w="2"/><text x="38.8707%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.46%)</title><rect x="38.6207%" y="325" width="0.4598%" height="15" fill="rgb(243,32,47)" fg:x="168" fg:w="2"/><text x="38.8707%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.46%)</title><rect x="38.6207%" y="309" width="0.4598%" height="15" fill="rgb(247,202,23)" fg:x="168" fg:w="2"/><text x="38.8707%" y="319.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="38.8506%" y="293" width="0.2299%" height="15" fill="rgb(219,102,11)" fg:x="169" fg:w="1"/><text x="39.1006%" y="303.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="38.8506%" y="277" width="0.2299%" height="15" fill="rgb(243,110,44)" fg:x="169" fg:w="1"/><text x="39.1006%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.69%)</title><rect x="40.0000%" y="341" width="0.6897%" height="15" fill="rgb(222,74,54)" fg:x="174" fg:w="3"/><text x="40.2500%" y="351.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.69%)</title><rect x="40.0000%" y="325" width="0.6897%" height="15" fill="rgb(216,99,12)" fg:x="174" fg:w="3"/><text x="40.2500%" y="335.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.15%)</title><rect x="39.7701%" y="357" width="1.1494%" height="15" fill="rgb(226,22,26)" fg:x="173" fg:w="5"/><text x="40.0201%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.23%)</title><rect x="40.6897%" y="341" width="0.2299%" height="15" fill="rgb(217,163,10)" fg:x="177" fg:w="1"/><text x="40.9397%" y="351.50"></text></g><g><title>core::mem::replace (1 samples, 0.23%)</title><rect x="40.6897%" y="325" width="0.2299%" height="15" fill="rgb(213,25,53)" fg:x="177" fg:w="1"/><text x="40.9397%" y="335.50"></text></g><g><title>core::ptr::read (1 samples, 0.23%)</title><rect x="40.6897%" y="309" width="0.2299%" height="15" fill="rgb(252,105,26)" fg:x="177" fg:w="1"/><text x="40.9397%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.92%)</title><rect x="40.9195%" y="309" width="0.9195%" height="15" fill="rgb(220,39,43)" fg:x="178" fg:w="4"/><text x="41.1695%" y="319.50"></text></g><g><title>multi_thread_hashing::multi_threaded_hash_parking_lot::{{closure}} (98 samples, 22.53%)</title><rect x="19.5402%" y="549" width="22.5287%" height="15" fill="rgb(229,68,48)" fg:x="85" fg:w="98"/><text x="19.7902%" y="559.50">multi_thread_hashing::multi_threaded..</text></g><g><title>sha256::digest (50 samples, 11.49%)</title><rect x="30.5747%" y="533" width="11.4943%" height="15" fill="rgb(252,8,32)" fg:x="133" fg:w="50"/><text x="30.8247%" y="543.50">sha256::digest</text></g><g><title>&lt;alloc::string::String as sha256::Sha256Digest&gt;::digest (49 samples, 11.26%)</title><rect x="30.8046%" y="517" width="11.2644%" height="15" fill="rgb(223,20,43)" fg:x="134" fg:w="49"/><text x="31.0546%" y="527.50">&lt;alloc::string::S..</text></g><g><title>sha256::__digest__ (47 samples, 10.80%)</title><rect x="31.2644%" y="501" width="10.8046%" height="15" fill="rgb(229,81,49)" fg:x="136" fg:w="47"/><text x="31.5144%" y="511.50">sha256::__digest..</text></g><g><title>hex::encode (17 samples, 3.91%)</title><rect x="38.1609%" y="485" width="3.9080%" height="15" fill="rgb(236,28,36)" fg:x="166" fg:w="17"/><text x="38.4109%" y="495.50">hex:..</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (17 samples, 3.91%)</title><rect x="38.1609%" y="469" width="3.9080%" height="15" fill="rgb(249,185,26)" fg:x="166" fg:w="17"/><text x="38.4109%" y="479.50">&lt;T a..</text></g><g><title>hex::encode_to_iter (17 samples, 3.91%)</title><rect x="38.1609%" y="453" width="3.9080%" height="15" fill="rgb(249,174,33)" fg:x="166" fg:w="17"/><text x="38.4109%" y="463.50">hex:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 3.91%)</title><rect x="38.1609%" y="437" width="3.9080%" height="15" fill="rgb(233,201,37)" fg:x="166" fg:w="17"/><text x="38.4109%" y="447.50">core..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (16 samples, 3.68%)</title><rect x="38.3908%" y="421" width="3.6782%" height="15" fill="rgb(221,78,26)" fg:x="167" fg:w="16"/><text x="38.6408%" y="431.50">&lt;all..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (15 samples, 3.45%)</title><rect x="38.6207%" y="405" width="3.4483%" height="15" fill="rgb(250,127,30)" fg:x="168" fg:w="15"/><text x="38.8707%" y="415.50">&lt;al..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 2.99%)</title><rect x="39.0805%" y="389" width="2.9885%" height="15" fill="rgb(230,49,44)" fg:x="170" fg:w="13"/><text x="39.3305%" y="399.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 2.99%)</title><rect x="39.0805%" y="373" width="2.9885%" height="15" fill="rgb(229,67,23)" fg:x="170" fg:w="13"/><text x="39.3305%" y="383.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5 samples, 1.15%)</title><rect x="40.9195%" y="357" width="1.1494%" height="15" fill="rgb(249,83,47)" fg:x="178" fg:w="5"/><text x="41.1695%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (5 samples, 1.15%)</title><rect x="40.9195%" y="341" width="1.1494%" height="15" fill="rgb(215,43,3)" fg:x="178" fg:w="5"/><text x="41.1695%" y="351.50"></text></g><g><title>alloc::string::String::push (5 samples, 1.15%)</title><rect x="40.9195%" y="325" width="1.1494%" height="15" fill="rgb(238,154,13)" fg:x="178" fg:w="5"/><text x="41.1695%" y="335.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.23%)</title><rect x="41.8391%" y="309" width="0.2299%" height="15" fill="rgb(219,56,2)" fg:x="182" fg:w="1"/><text x="42.0891%" y="319.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.23%)</title><rect x="41.8391%" y="293" width="0.2299%" height="15" fill="rgb(233,0,4)" fg:x="182" fg:w="1"/><text x="42.0891%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.69%)</title><rect x="42.9885%" y="533" width="0.6897%" height="15" fill="rgb(235,30,7)" fg:x="187" fg:w="3"/><text x="43.2385%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.69%)</title><rect x="42.9885%" y="517" width="0.6897%" height="15" fill="rgb(250,79,13)" fg:x="187" fg:w="3"/><text x="43.2385%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.69%)</title><rect x="42.9885%" y="501" width="0.6897%" height="15" fill="rgb(211,146,34)" fg:x="187" fg:w="3"/><text x="43.2385%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.69%)</title><rect x="42.9885%" y="485" width="0.6897%" height="15" fill="rgb(228,22,38)" fg:x="187" fg:w="3"/><text x="43.2385%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.69%)</title><rect x="42.9885%" y="469" width="0.6897%" height="15" fill="rgb(235,168,5)" fg:x="187" fg:w="3"/><text x="43.2385%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.69%)</title><rect x="42.9885%" y="453" width="0.6897%" height="15" fill="rgb(221,155,16)" fg:x="187" fg:w="3"/><text x="43.2385%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.69%)</title><rect x="42.9885%" y="437" width="0.6897%" height="15" fill="rgb(215,215,53)" fg:x="187" fg:w="3"/><text x="43.2385%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.69%)</title><rect x="42.9885%" y="421" width="0.6897%" height="15" fill="rgb(223,4,10)" fg:x="187" fg:w="3"/><text x="43.2385%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.23%)</title><rect x="43.6782%" y="533" width="0.2299%" height="15" fill="rgb(234,103,6)" fg:x="190" fg:w="1"/><text x="43.9282%" y="543.50"></text></g><g><title>core::ptr::write (1 samples, 0.23%)</title><rect x="43.6782%" y="517" width="0.2299%" height="15" fill="rgb(227,97,0)" fg:x="190" fg:w="1"/><text x="43.9282%" y="527.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.23%)</title><rect x="43.9080%" y="501" width="0.2299%" height="15" fill="rgb(234,150,53)" fg:x="191" fg:w="1"/><text x="44.1580%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(u32,alloc::string::String)&gt;&gt;&gt; (5 samples, 1.15%)</title><rect x="43.9080%" y="533" width="1.1494%" height="15" fill="rgb(228,201,54)" fg:x="191" fg:w="5"/><text x="44.1580%" y="543.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.15%)</title><rect x="43.9080%" y="517" width="1.1494%" height="15" fill="rgb(222,22,37)" fg:x="191" fg:w="5"/><text x="44.1580%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (4 samples, 0.92%)</title><rect x="44.1379%" y="501" width="0.9195%" height="15" fill="rgb(237,53,32)" fg:x="192" fg:w="4"/><text x="44.3879%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.23%)</title><rect x="45.5172%" y="405" width="0.2299%" height="15" fill="rgb(233,25,53)" fg:x="198" fg:w="1"/><text x="45.7672%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.46%)</title><rect x="45.5172%" y="501" width="0.4598%" height="15" fill="rgb(210,40,34)" fg:x="198" fg:w="2"/><text x="45.7672%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="45.5172%" y="485" width="0.4598%" height="15" fill="rgb(241,220,44)" fg:x="198" fg:w="2"/><text x="45.7672%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="45.5172%" y="469" width="0.4598%" height="15" fill="rgb(235,28,35)" fg:x="198" fg:w="2"/><text x="45.7672%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="45.5172%" y="453" width="0.4598%" height="15" fill="rgb(210,56,17)" fg:x="198" fg:w="2"/><text x="45.7672%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.46%)</title><rect x="45.5172%" y="437" width="0.4598%" height="15" fill="rgb(224,130,29)" fg:x="198" fg:w="2"/><text x="45.7672%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.46%)</title><rect x="45.5172%" y="421" width="0.4598%" height="15" fill="rgb(235,212,8)" fg:x="198" fg:w="2"/><text x="45.7672%" y="431.50"></text></g><g><title>__rust_dealloc (1 samples, 0.23%)</title><rect x="45.7471%" y="405" width="0.2299%" height="15" fill="rgb(223,33,50)" fg:x="199" fg:w="1"/><text x="45.9971%" y="415.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::Update&gt;::update (1 samples, 0.23%)</title><rect x="45.9770%" y="469" width="0.2299%" height="15" fill="rgb(219,149,13)" fg:x="200" fg:w="1"/><text x="46.2270%" y="479.50"></text></g><g><title>sha2::sha256::Engine256::update (1 samples, 0.23%)</title><rect x="45.9770%" y="453" width="0.2299%" height="15" fill="rgb(250,156,29)" fg:x="200" fg:w="1"/><text x="46.2270%" y="463.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::input_blocks (1 samples, 0.23%)</title><rect x="45.9770%" y="437" width="0.2299%" height="15" fill="rgb(216,193,19)" fg:x="200" fg:w="1"/><text x="46.2270%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.23%)</title><rect x="45.9770%" y="421" width="0.2299%" height="15" fill="rgb(216,135,14)" fg:x="200" fg:w="1"/><text x="46.2270%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.23%)</title><rect x="45.9770%" y="405" width="0.2299%" height="15" fill="rgb(241,47,5)" fg:x="200" fg:w="1"/><text x="46.2270%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.23%)</title><rect x="45.9770%" y="389" width="0.2299%" height="15" fill="rgb(233,42,35)" fg:x="200" fg:w="1"/><text x="46.2270%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.23%)</title><rect x="45.9770%" y="373" width="0.2299%" height="15" fill="rgb(231,13,6)" fg:x="200" fg:w="1"/><text x="46.2270%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.23%)</title><rect x="45.9770%" y="357" width="0.2299%" height="15" fill="rgb(207,181,40)" fg:x="200" fg:w="1"/><text x="46.2270%" y="367.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::digest_pad (1 samples, 0.23%)</title><rect x="46.2069%" y="389" width="0.2299%" height="15" fill="rgb(254,173,49)" fg:x="201" fg:w="1"/><text x="46.4569%" y="399.50"></text></g><g><title>block_buffer::set_zero (1 samples, 0.23%)</title><rect x="46.2069%" y="373" width="0.2299%" height="15" fill="rgb(221,1,38)" fg:x="201" fg:w="1"/><text x="46.4569%" y="383.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.23%)</title><rect x="46.2069%" y="357" width="0.2299%" height="15" fill="rgb(206,124,46)" fg:x="201" fg:w="1"/><text x="46.4569%" y="367.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.23%)</title><rect x="46.2069%" y="341" width="0.2299%" height="15" fill="rgb(249,21,11)" fg:x="201" fg:w="1"/><text x="46.4569%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.23%)</title><rect x="46.8966%" y="325" width="0.2299%" height="15" fill="rgb(222,201,40)" fg:x="204" fg:w="1"/><text x="47.1466%" y="335.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.23%)</title><rect x="46.8966%" y="309" width="0.2299%" height="15" fill="rgb(235,61,29)" fg:x="204" fg:w="1"/><text x="47.1466%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.23%)</title><rect x="46.8966%" y="293" width="0.2299%" height="15" fill="rgb(219,207,3)" fg:x="204" fg:w="1"/><text x="47.1466%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (2 samples, 0.46%)</title><rect x="47.1264%" y="325" width="0.4598%" height="15" fill="rgb(222,56,46)" fg:x="205" fg:w="2"/><text x="47.3764%" y="335.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (2 samples, 0.46%)</title><rect x="47.1264%" y="309" width="0.4598%" height="15" fill="rgb(239,76,54)" fg:x="205" fg:w="2"/><text x="47.3764%" y="319.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (2 samples, 0.46%)</title><rect x="47.1264%" y="293" width="0.4598%" height="15" fill="rgb(231,124,27)" fg:x="205" fg:w="2"/><text x="47.3764%" y="303.50"></text></g><g><title>sha2::sha256::soft::add (3 samples, 0.69%)</title><rect x="47.5862%" y="309" width="0.6897%" height="15" fill="rgb(249,195,6)" fg:x="207" fg:w="3"/><text x="47.8362%" y="319.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (3 samples, 0.69%)</title><rect x="47.5862%" y="293" width="0.6897%" height="15" fill="rgb(237,174,47)" fg:x="207" fg:w="3"/><text x="47.8362%" y="303.50"></text></g><g><title>sha2::sha256::soft::add (2 samples, 0.46%)</title><rect x="48.2759%" y="277" width="0.4598%" height="15" fill="rgb(206,201,31)" fg:x="210" fg:w="2"/><text x="48.5259%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2 samples, 0.46%)</title><rect x="48.2759%" y="261" width="0.4598%" height="15" fill="rgb(231,57,52)" fg:x="210" fg:w="2"/><text x="48.5259%" y="271.50"></text></g><g><title>sha2::sha256::soft::or (4 samples, 0.92%)</title><rect x="48.7356%" y="261" width="0.9195%" height="15" fill="rgb(248,177,22)" fg:x="212" fg:w="4"/><text x="48.9856%" y="271.50"></text></g><g><title>sha2::sha256::soft::shl (1 samples, 0.23%)</title><rect x="49.6552%" y="261" width="0.2299%" height="15" fill="rgb(215,211,37)" fg:x="216" fg:w="1"/><text x="49.9052%" y="271.50"></text></g><g><title>sha2::sha256::soft::sha256msg1 (10 samples, 2.30%)</title><rect x="48.2759%" y="293" width="2.2989%" height="15" fill="rgb(241,128,51)" fg:x="210" fg:w="10"/><text x="48.5259%" y="303.50">s..</text></g><g><title>sha2::sha256::soft::sha256msg1::sigma0x4 (8 samples, 1.84%)</title><rect x="48.7356%" y="277" width="1.8391%" height="15" fill="rgb(227,165,31)" fg:x="212" fg:w="8"/><text x="48.9856%" y="287.50">s..</text></g><g><title>sha2::sha256::soft::xor (3 samples, 0.69%)</title><rect x="49.8851%" y="261" width="0.6897%" height="15" fill="rgb(228,167,24)" fg:x="217" fg:w="3"/><text x="50.1351%" y="271.50"></text></g><g><title>sha2::sha256::soft::schedule (21 samples, 4.83%)</title><rect x="48.2759%" y="309" width="4.8276%" height="15" fill="rgb(228,143,12)" fg:x="210" fg:w="21"/><text x="48.5259%" y="319.50">sha2::..</text></g><g><title>sha2::sha256::soft::sha256msg2 (11 samples, 2.53%)</title><rect x="50.5747%" y="293" width="2.5287%" height="15" fill="rgb(249,149,8)" fg:x="220" fg:w="11"/><text x="50.8247%" y="303.50">sh..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (8 samples, 1.84%)</title><rect x="51.2644%" y="277" width="1.8391%" height="15" fill="rgb(243,35,44)" fg:x="223" fg:w="8"/><text x="51.5144%" y="287.50">c..</text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (8 samples, 1.84%)</title><rect x="58.6207%" y="293" width="1.8391%" height="15" fill="rgb(246,89,9)" fg:x="255" fg:w="8"/><text x="58.8707%" y="303.50">c..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (74 samples, 17.01%)</title><rect x="45.9770%" y="485" width="17.0115%" height="15" fill="rgb(233,213,13)" fg:x="200" fg:w="74"/><text x="46.2270%" y="495.50">&lt;D as digest::digest::Dige..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (73 samples, 16.78%)</title><rect x="46.2069%" y="469" width="16.7816%" height="15" fill="rgb(233,141,41)" fg:x="201" fg:w="73"/><text x="46.4569%" y="479.50">digest::fixed::FixedOutput..</text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (73 samples, 16.78%)</title><rect x="46.2069%" y="453" width="16.7816%" height="15" fill="rgb(239,167,4)" fg:x="201" fg:w="73"/><text x="46.4569%" y="463.50">&lt;D as digest::fixed::Fixed..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (73 samples, 16.78%)</title><rect x="46.2069%" y="437" width="16.7816%" height="15" fill="rgb(209,217,16)" fg:x="201" fg:w="73"/><text x="46.4569%" y="447.50">&lt;sha2::sha256::Sha256 as d..</text></g><g><title>sha2::sha256::Engine256::finish (73 samples, 16.78%)</title><rect x="46.2069%" y="421" width="16.7816%" height="15" fill="rgb(219,88,35)" fg:x="201" fg:w="73"/><text x="46.4569%" y="431.50">sha2::sha256::Engine256::f..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (73 samples, 16.78%)</title><rect x="46.2069%" y="405" width="16.7816%" height="15" fill="rgb(220,193,23)" fg:x="201" fg:w="73"/><text x="46.4569%" y="415.50">block_buffer::BlockBuffer&lt;..</text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (72 samples, 16.55%)</title><rect x="46.4368%" y="389" width="16.5517%" height="15" fill="rgb(230,90,52)" fg:x="202" fg:w="72"/><text x="46.6868%" y="399.50">sha2::sha256::Engine256::f..</text></g><g><title>sha2::sha256::compress256 (72 samples, 16.55%)</title><rect x="46.4368%" y="373" width="16.5517%" height="15" fill="rgb(252,106,19)" fg:x="202" fg:w="72"/><text x="46.6868%" y="383.50">sha2::sha256::compress256</text></g><g><title>sha2::sha256::x86::compress (72 samples, 16.55%)</title><rect x="46.4368%" y="357" width="16.5517%" height="15" fill="rgb(206,74,20)" fg:x="202" fg:w="72"/><text x="46.6868%" y="367.50">sha2::sha256::x86::compress</text></g><g><title>sha2::sha256::soft::compress (72 samples, 16.55%)</title><rect x="46.4368%" y="341" width="16.5517%" height="15" fill="rgb(230,138,44)" fg:x="202" fg:w="72"/><text x="46.6868%" y="351.50">sha2::sha256::soft::compre..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (67 samples, 15.40%)</title><rect x="47.5862%" y="325" width="15.4023%" height="15" fill="rgb(235,182,43)" fg:x="207" fg:w="67"/><text x="47.8362%" y="335.50">sha2::sha256::soft::sha2..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (43 samples, 9.89%)</title><rect x="53.1034%" y="309" width="9.8851%" height="15" fill="rgb(242,16,51)" fg:x="231" fg:w="43"/><text x="53.3534%" y="319.50">sha2::sha256::..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (11 samples, 2.53%)</title><rect x="60.4598%" y="293" width="2.5287%" height="15" fill="rgb(248,9,4)" fg:x="263" fg:w="11"/><text x="60.7098%" y="303.50">co..</text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 2.07%)</title><rect x="63.2184%" y="309" width="2.0690%" height="15" fill="rgb(210,31,22)" fg:x="275" fg:w="9"/><text x="63.4684%" y="319.50">a..</text></g><g><title>__GI___libc_malloc (9 samples, 2.07%)</title><rect x="63.2184%" y="293" width="2.0690%" height="15" fill="rgb(239,54,39)" fg:x="275" fg:w="9"/><text x="63.4684%" y="303.50">_..</text></g><g><title>_int_malloc (4 samples, 0.92%)</title><rect x="64.3678%" y="277" width="0.9195%" height="15" fill="rgb(230,99,41)" fg:x="280" fg:w="4"/><text x="64.6178%" y="287.50"></text></g><g><title>sysmalloc (2 samples, 0.46%)</title><rect x="64.8276%" y="261" width="0.4598%" height="15" fill="rgb(253,106,12)" fg:x="282" fg:w="2"/><text x="65.0776%" y="271.50"></text></g><g><title>__GI___mprotect (1 samples, 0.23%)</title><rect x="65.0575%" y="245" width="0.2299%" height="15" fill="rgb(213,46,41)" fg:x="283" fg:w="1"/><text x="65.3075%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="65.0575%" y="229" width="0.2299%" height="15" fill="rgb(215,133,35)" fg:x="283" fg:w="1"/><text x="65.3075%" y="239.50"></text></g><g><title>alloc::string::String::reserve (10 samples, 2.30%)</title><rect x="63.2184%" y="389" width="2.2989%" height="15" fill="rgb(213,28,5)" fg:x="275" fg:w="10"/><text x="63.4684%" y="399.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 2.30%)</title><rect x="63.2184%" y="373" width="2.2989%" height="15" fill="rgb(215,77,49)" fg:x="275" fg:w="10"/><text x="63.4684%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 2.30%)</title><rect x="63.2184%" y="357" width="2.2989%" height="15" fill="rgb(248,100,22)" fg:x="275" fg:w="10"/><text x="63.4684%" y="367.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 2.30%)</title><rect x="63.2184%" y="341" width="2.2989%" height="15" fill="rgb(208,67,9)" fg:x="275" fg:w="10"/><text x="63.4684%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 2.30%)</title><rect x="63.2184%" y="325" width="2.2989%" height="15" fill="rgb(219,133,21)" fg:x="275" fg:w="10"/><text x="63.4684%" y="335.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.23%)</title><rect x="65.2874%" y="309" width="0.2299%" height="15" fill="rgb(246,46,29)" fg:x="284" fg:w="1"/><text x="65.5374%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.23%)</title><rect x="65.2874%" y="293" width="0.2299%" height="15" fill="rgb(246,185,52)" fg:x="284" fg:w="1"/><text x="65.5374%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.46%)</title><rect x="67.8161%" y="341" width="0.4598%" height="15" fill="rgb(252,136,11)" fg:x="295" fg:w="2"/><text x="68.0661%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 1.84%)</title><rect x="68.2759%" y="341" width="1.8391%" height="15" fill="rgb(219,138,53)" fg:x="297" fg:w="8"/><text x="68.5259%" y="351.50">c..</text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (8 samples, 1.84%)</title><rect x="68.2759%" y="325" width="1.8391%" height="15" fill="rgb(211,51,23)" fg:x="297" fg:w="8"/><text x="68.5259%" y="335.50">&lt;..</text></g><g><title>&lt;&amp;u8 as core::ops::bit::BitAnd&lt;u8&gt;&gt;::bitand (2 samples, 0.46%)</title><rect x="69.6552%" y="309" width="0.4598%" height="15" fill="rgb(247,221,28)" fg:x="303" fg:w="2"/><text x="69.9052%" y="319.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (2 samples, 0.46%)</title><rect x="69.6552%" y="293" width="0.4598%" height="15" fill="rgb(251,222,45)" fg:x="303" fg:w="2"/><text x="69.9052%" y="303.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 4.14%)</title><rect x="66.6667%" y="357" width="4.1379%" height="15" fill="rgb(217,162,53)" fg:x="290" fg:w="18"/><text x="66.9167%" y="367.50">&lt;hex:..</text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.69%)</title><rect x="70.1149%" y="341" width="0.6897%" height="15" fill="rgb(229,93,14)" fg:x="305" fg:w="3"/><text x="70.3649%" y="351.50"></text></g><g><title>core::mem::replace (3 samples, 0.69%)</title><rect x="70.1149%" y="325" width="0.6897%" height="15" fill="rgb(209,67,49)" fg:x="305" fg:w="3"/><text x="70.3649%" y="335.50"></text></g><g><title>core::ptr::write (3 samples, 0.69%)</title><rect x="70.1149%" y="309" width="0.6897%" height="15" fill="rgb(213,87,29)" fg:x="305" fg:w="3"/><text x="70.3649%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 2.76%)</title><rect x="70.8046%" y="309" width="2.7586%" height="15" fill="rgb(205,151,52)" fg:x="308" fg:w="12"/><text x="71.0546%" y="319.50">al..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (47 samples, 10.80%)</title><rect x="62.9885%" y="437" width="10.8046%" height="15" fill="rgb(253,215,39)" fg:x="274" fg:w="47"/><text x="63.2385%" y="447.50">core::iter::trai..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (46 samples, 10.57%)</title><rect x="63.2184%" y="421" width="10.5747%" height="15" fill="rgb(221,220,41)" fg:x="275" fg:w="46"/><text x="63.4684%" y="431.50">&lt;alloc::string:..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (46 samples, 10.57%)</title><rect x="63.2184%" y="405" width="10.5747%" height="15" fill="rgb(218,133,21)" fg:x="275" fg:w="46"/><text x="63.4684%" y="415.50">&lt;alloc::string:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36 samples, 8.28%)</title><rect x="65.5172%" y="389" width="8.2759%" height="15" fill="rgb(221,193,43)" fg:x="285" fg:w="36"/><text x="65.7672%" y="399.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (36 samples, 8.28%)</title><rect x="65.5172%" y="373" width="8.2759%" height="15" fill="rgb(240,128,52)" fg:x="285" fg:w="36"/><text x="65.7672%" y="383.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (13 samples, 2.99%)</title><rect x="70.8046%" y="357" width="2.9885%" height="15" fill="rgb(253,114,12)" fg:x="308" fg:w="13"/><text x="71.0546%" y="367.50">cor..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (13 samples, 2.99%)</title><rect x="70.8046%" y="341" width="2.9885%" height="15" fill="rgb(215,223,47)" fg:x="308" fg:w="13"/><text x="71.0546%" y="351.50">&lt;al..</text></g><g><title>alloc::string::String::push (13 samples, 2.99%)</title><rect x="70.8046%" y="325" width="2.9885%" height="15" fill="rgb(248,225,23)" fg:x="308" fg:w="13"/><text x="71.0546%" y="335.50">all..</text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.23%)</title><rect x="73.5632%" y="309" width="0.2299%" height="15" fill="rgb(250,108,0)" fg:x="320" fg:w="1"/><text x="73.8132%" y="319.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.23%)</title><rect x="73.5632%" y="293" width="0.2299%" height="15" fill="rgb(228,208,7)" fg:x="320" fg:w="1"/><text x="73.8132%" y="303.50"></text></g><g><title>sha256::digest (126 samples, 28.97%)</title><rect x="45.0575%" y="533" width="28.9655%" height="15" fill="rgb(244,45,10)" fg:x="196" fg:w="126"/><text x="45.3075%" y="543.50">sha256::digest</text></g><g><title>&lt;alloc::string::String as sha256::Sha256Digest&gt;::digest (125 samples, 28.74%)</title><rect x="45.2874%" y="517" width="28.7356%" height="15" fill="rgb(207,125,25)" fg:x="197" fg:w="125"/><text x="45.5374%" y="527.50">&lt;alloc::string::String as sha256::Sha256Digest..</text></g><g><title>sha256::__digest__ (122 samples, 28.05%)</title><rect x="45.9770%" y="501" width="28.0460%" height="15" fill="rgb(210,195,18)" fg:x="200" fg:w="122"/><text x="46.2270%" y="511.50">sha256::__digest__</text></g><g><title>hex::encode (48 samples, 11.03%)</title><rect x="62.9885%" y="485" width="11.0345%" height="15" fill="rgb(249,80,12)" fg:x="274" fg:w="48"/><text x="63.2385%" y="495.50">hex::encode</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (48 samples, 11.03%)</title><rect x="62.9885%" y="469" width="11.0345%" height="15" fill="rgb(221,65,9)" fg:x="274" fg:w="48"/><text x="63.2385%" y="479.50">&lt;T as hex::ToHex..</text></g><g><title>hex::encode_to_iter (48 samples, 11.03%)</title><rect x="62.9885%" y="453" width="11.0345%" height="15" fill="rgb(235,49,36)" fg:x="274" fg:w="48"/><text x="63.2385%" y="463.50">hex::encode_to_i..</text></g><g><title>hex::BytesToHexChars::new (1 samples, 0.23%)</title><rect x="73.7931%" y="437" width="0.2299%" height="15" fill="rgb(225,32,20)" fg:x="321" fg:w="1"/><text x="74.0431%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (3 samples, 0.69%)</title><rect x="74.0230%" y="517" width="0.6897%" height="15" fill="rgb(215,141,46)" fg:x="322" fg:w="3"/><text x="74.2730%" y="527.50"></text></g><g><title>std::sync::poison::Flag::guard (3 samples, 0.69%)</title><rect x="74.0230%" y="501" width="0.6897%" height="15" fill="rgb(250,160,47)" fg:x="322" fg:w="3"/><text x="74.2730%" y="511.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 1.15%)</title><rect x="77.7011%" y="485" width="1.1494%" height="15" fill="rgb(216,222,40)" fg:x="338" fg:w="5"/><text x="77.9511%" y="495.50"></text></g><g><title>syscall (5 samples, 1.15%)</title><rect x="77.7011%" y="469" width="1.1494%" height="15" fill="rgb(234,217,39)" fg:x="338" fg:w="5"/><text x="77.9511%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (9 samples, 2.07%)</title><rect x="77.2414%" y="501" width="2.0690%" height="15" fill="rgb(207,178,40)" fg:x="336" fg:w="9"/><text x="77.4914%" y="511.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 0.46%)</title><rect x="78.8506%" y="485" width="0.4598%" height="15" fill="rgb(221,136,13)" fg:x="343" fg:w="2"/><text x="79.1006%" y="495.50"></text></g><g><title>std::panic::catch_unwind (262 samples, 60.23%)</title><rect x="19.3103%" y="645" width="60.2299%" height="15" fill="rgb(249,199,10)" fg:x="84" fg:w="262"/><text x="19.5603%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (262 samples, 60.23%)</title><rect x="19.3103%" y="629" width="60.2299%" height="15" fill="rgb(249,222,13)" fg:x="84" fg:w="262"/><text x="19.5603%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (262 samples, 60.23%)</title><rect x="19.3103%" y="613" width="60.2299%" height="15" fill="rgb(244,185,38)" fg:x="84" fg:w="262"/><text x="19.5603%" y="623.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (262 samples, 60.23%)</title><rect x="19.3103%" y="597" width="60.2299%" height="15" fill="rgb(236,202,9)" fg:x="84" fg:w="262"/><text x="19.5603%" y="607.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (262 samples, 60.23%)</title><rect x="19.3103%" y="581" width="60.2299%" height="15" fill="rgb(250,229,37)" fg:x="84" fg:w="262"/><text x="19.5603%" y="591.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (262 samples, 60.23%)</title><rect x="19.3103%" y="565" width="60.2299%" height="15" fill="rgb(206,174,23)" fg:x="84" fg:w="262"/><text x="19.5603%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>multi_thread_hashing::multi_threaded_hash_std::{{closure}} (163 samples, 37.47%)</title><rect x="42.0690%" y="549" width="37.4713%" height="15" fill="rgb(211,33,43)" fg:x="183" fg:w="163"/><text x="42.3190%" y="559.50">multi_thread_hashing::multi_threaded_hash_std::{{closure}}</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (24 samples, 5.52%)</title><rect x="74.0230%" y="533" width="5.5172%" height="15" fill="rgb(245,58,50)" fg:x="322" fg:w="24"/><text x="74.2730%" y="543.50">std::sy..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (21 samples, 4.83%)</title><rect x="74.7126%" y="517" width="4.8276%" height="15" fill="rgb(244,68,36)" fg:x="325" fg:w="21"/><text x="74.9626%" y="527.50">std::s..</text></g><g><title>syscall (1 samples, 0.23%)</title><rect x="79.3103%" y="501" width="0.2299%" height="15" fill="rgb(232,229,15)" fg:x="345" fg:w="1"/><text x="79.5603%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="79.3103%" y="485" width="0.2299%" height="15" fill="rgb(254,30,23)" fg:x="345" fg:w="1"/><text x="79.5603%" y="495.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.23%)</title><rect x="79.5402%" y="613" width="0.2299%" height="15" fill="rgb(235,160,14)" fg:x="346" fg:w="1"/><text x="79.7902%" y="623.50"></text></g><g><title>__pthread_attr_destroy (2 samples, 0.46%)</title><rect x="79.5402%" y="629" width="0.4598%" height="15" fill="rgb(212,155,44)" fg:x="346" fg:w="2"/><text x="79.7902%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.23%)</title><rect x="79.7701%" y="613" width="0.2299%" height="15" fill="rgb(226,2,50)" fg:x="347" fg:w="1"/><text x="80.0201%" y="623.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="80.2299%" y="581" width="0.2299%" height="15" fill="rgb(234,177,6)" fg:x="349" fg:w="1"/><text x="80.4799%" y="591.50"></text></g><g><title>arena_get2.part.0 (3 samples, 0.69%)</title><rect x="80.4598%" y="581" width="0.6897%" height="15" fill="rgb(217,24,9)" fg:x="350" fg:w="3"/><text x="80.7098%" y="591.50"></text></g><g><title>new_heap (1 samples, 0.23%)</title><rect x="80.9195%" y="565" width="0.2299%" height="15" fill="rgb(220,13,46)" fg:x="352" fg:w="1"/><text x="81.1695%" y="575.50"></text></g><g><title>__GI___libc_malloc (6 samples, 1.38%)</title><rect x="80.0000%" y="613" width="1.3793%" height="15" fill="rgb(239,221,27)" fg:x="348" fg:w="6"/><text x="80.2500%" y="623.50"></text></g><g><title>tcache_init.part.0 (6 samples, 1.38%)</title><rect x="80.0000%" y="597" width="1.3793%" height="15" fill="rgb(222,198,25)" fg:x="348" fg:w="6"/><text x="80.2500%" y="607.50"></text></g><g><title>get_free_list (1 samples, 0.23%)</title><rect x="81.1494%" y="581" width="0.2299%" height="15" fill="rgb(211,99,13)" fg:x="353" fg:w="1"/><text x="81.3994%" y="591.50"></text></g><g><title>std::sys::unix::thread::guard::current (9 samples, 2.07%)</title><rect x="79.5402%" y="645" width="2.0690%" height="15" fill="rgb(232,111,31)" fg:x="346" fg:w="9"/><text x="79.7902%" y="655.50">s..</text></g><g><title>pthread_getattr_np (7 samples, 1.61%)</title><rect x="80.0000%" y="629" width="1.6092%" height="15" fill="rgb(245,82,37)" fg:x="348" fg:w="7"/><text x="80.2500%" y="639.50"></text></g><g><title>__pthread_getaffinity_new (1 samples, 0.23%)</title><rect x="81.3793%" y="613" width="0.2299%" height="15" fill="rgb(227,149,46)" fg:x="354" fg:w="1"/><text x="81.6293%" y="623.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.23%)</title><rect x="81.3793%" y="597" width="0.2299%" height="15" fill="rgb(218,36,50)" fg:x="354" fg:w="1"/><text x="81.6293%" y="607.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.23%)</title><rect x="81.6092%" y="549" width="0.2299%" height="15" fill="rgb(226,80,48)" fg:x="355" fg:w="1"/><text x="81.8592%" y="559.50"></text></g><g><title>std::sys_common::thread_info::set (2 samples, 0.46%)</title><rect x="81.6092%" y="645" width="0.4598%" height="15" fill="rgb(238,224,15)" fg:x="355" fg:w="2"/><text x="81.8592%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.46%)</title><rect x="81.6092%" y="629" width="0.4598%" height="15" fill="rgb(241,136,10)" fg:x="355" fg:w="2"/><text x="81.8592%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.46%)</title><rect x="81.6092%" y="613" width="0.4598%" height="15" fill="rgb(208,32,45)" fg:x="355" fg:w="2"/><text x="81.8592%" y="623.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (2 samples, 0.46%)</title><rect x="81.6092%" y="597" width="0.4598%" height="15" fill="rgb(207,135,9)" fg:x="355" fg:w="2"/><text x="81.8592%" y="607.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::register_dtor (2 samples, 0.46%)</title><rect x="81.6092%" y="581" width="0.4598%" height="15" fill="rgb(206,86,44)" fg:x="355" fg:w="2"/><text x="81.8592%" y="591.50"></text></g><g><title>__cxa_thread_atexit_impl (2 samples, 0.46%)</title><rect x="81.6092%" y="565" width="0.4598%" height="15" fill="rgb(245,177,15)" fg:x="355" fg:w="2"/><text x="81.8592%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (1 samples, 0.23%)</title><rect x="81.8391%" y="549" width="0.2299%" height="15" fill="rgb(206,64,50)" fg:x="356" fg:w="1"/><text x="82.0891%" y="559.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.23%)</title><rect x="81.8391%" y="533" width="0.2299%" height="15" fill="rgb(234,36,40)" fg:x="356" fg:w="1"/><text x="82.0891%" y="543.50"></text></g><g><title>__GI___clone (358 samples, 82.30%)</title><rect x="0.0000%" y="757" width="82.2989%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="358"/><text x="0.2500%" y="767.50">__GI___clone</text></g><g><title>start_thread (290 samples, 66.67%)</title><rect x="15.6322%" y="741" width="66.6667%" height="15" fill="rgb(210,75,36)" fg:x="68" fg:w="290"/><text x="15.8822%" y="751.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (275 samples, 63.22%)</title><rect x="19.0805%" y="725" width="63.2184%" height="15" fill="rgb(229,88,21)" fg:x="83" fg:w="275"/><text x="19.3305%" y="735.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (275 samples, 63.22%)</title><rect x="19.0805%" y="709" width="63.2184%" height="15" fill="rgb(252,204,47)" fg:x="83" fg:w="275"/><text x="19.3305%" y="719.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (275 samples, 63.22%)</title><rect x="19.0805%" y="693" width="63.2184%" height="15" fill="rgb(208,77,27)" fg:x="83" fg:w="275"/><text x="19.3305%" y="703.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (275 samples, 63.22%)</title><rect x="19.0805%" y="677" width="63.2184%" height="15" fill="rgb(221,76,26)" fg:x="83" fg:w="275"/><text x="19.3305%" y="687.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (275 samples, 63.22%)</title><rect x="19.0805%" y="661" width="63.2184%" height="15" fill="rgb(225,139,18)" fg:x="83" fg:w="275"/><text x="19.3305%" y="671.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::thread::Thread::cname (1 samples, 0.23%)</title><rect x="82.0690%" y="645" width="0.2299%" height="15" fill="rgb(230,137,11)" fg:x="357" fg:w="1"/><text x="82.3190%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="83.2184%" y="741" width="0.2299%" height="15" fill="rgb(212,28,1)" fg:x="362" fg:w="1"/><text x="83.4684%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.23%)</title><rect x="83.6782%" y="293" width="0.2299%" height="15" fill="rgb(248,164,17)" fg:x="364" fg:w="1"/><text x="83.9282%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.23%)</title><rect x="83.6782%" y="277" width="0.2299%" height="15" fill="rgb(222,171,42)" fg:x="364" fg:w="1"/><text x="83.9282%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (1 samples, 0.23%)</title><rect x="83.6782%" y="261" width="0.2299%" height="15" fill="rgb(243,84,45)" fg:x="364" fg:w="1"/><text x="83.9282%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.23%)</title><rect x="83.6782%" y="245" width="0.2299%" height="15" fill="rgb(252,49,23)" fg:x="364" fg:w="1"/><text x="83.9282%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.23%)</title><rect x="83.6782%" y="229" width="0.2299%" height="15" fill="rgb(215,19,7)" fg:x="364" fg:w="1"/><text x="83.9282%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.23%)</title><rect x="83.6782%" y="213" width="0.2299%" height="15" fill="rgb(238,81,41)" fg:x="364" fg:w="1"/><text x="83.9282%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.23%)</title><rect x="83.6782%" y="197" width="0.2299%" height="15" fill="rgb(210,199,37)" fg:x="364" fg:w="1"/><text x="83.9282%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.92%)</title><rect x="83.4483%" y="485" width="0.9195%" height="15" fill="rgb(244,192,49)" fg:x="363" fg:w="4"/><text x="83.6983%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.92%)</title><rect x="83.4483%" y="469" width="0.9195%" height="15" fill="rgb(226,211,11)" fg:x="363" fg:w="4"/><text x="83.6983%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.92%)</title><rect x="83.4483%" y="453" width="0.9195%" height="15" fill="rgb(236,162,54)" fg:x="363" fg:w="4"/><text x="83.6983%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.92%)</title><rect x="83.4483%" y="437" width="0.9195%" height="15" fill="rgb(220,229,9)" fg:x="363" fg:w="4"/><text x="83.6983%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.92%)</title><rect x="83.4483%" y="421" width="0.9195%" height="15" fill="rgb(250,87,22)" fg:x="363" fg:w="4"/><text x="83.6983%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.92%)</title><rect x="83.4483%" y="405" width="0.9195%" height="15" fill="rgb(239,43,17)" fg:x="363" fg:w="4"/><text x="83.6983%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.92%)</title><rect x="83.4483%" y="389" width="0.9195%" height="15" fill="rgb(231,177,25)" fg:x="363" fg:w="4"/><text x="83.6983%" y="399.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.92%)</title><rect x="83.4483%" y="373" width="0.9195%" height="15" fill="rgb(219,179,1)" fg:x="363" fg:w="4"/><text x="83.6983%" y="383.50"></text></g><g><title>std::io::BufRead::read_line (4 samples, 0.92%)</title><rect x="83.4483%" y="357" width="0.9195%" height="15" fill="rgb(238,219,53)" fg:x="363" fg:w="4"/><text x="83.6983%" y="367.50"></text></g><g><title>std::io::append_to_string (4 samples, 0.92%)</title><rect x="83.4483%" y="341" width="0.9195%" height="15" fill="rgb(232,167,36)" fg:x="363" fg:w="4"/><text x="83.6983%" y="351.50"></text></g><g><title>std::io::BufRead::read_line::{{closure}} (3 samples, 0.69%)</title><rect x="83.6782%" y="325" width="0.6897%" height="15" fill="rgb(244,19,51)" fg:x="364" fg:w="3"/><text x="83.9282%" y="335.50"></text></g><g><title>std::io::read_until (3 samples, 0.69%)</title><rect x="83.6782%" y="309" width="0.6897%" height="15" fill="rgb(224,6,22)" fg:x="364" fg:w="3"/><text x="83.9282%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.46%)</title><rect x="83.9080%" y="293" width="0.4598%" height="15" fill="rgb(224,145,5)" fg:x="365" fg:w="2"/><text x="84.1580%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.46%)</title><rect x="83.9080%" y="277" width="0.4598%" height="15" fill="rgb(234,130,49)" fg:x="365" fg:w="2"/><text x="84.1580%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.46%)</title><rect x="83.9080%" y="261" width="0.4598%" height="15" fill="rgb(254,6,2)" fg:x="365" fg:w="2"/><text x="84.1580%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.46%)</title><rect x="83.9080%" y="245" width="0.4598%" height="15" fill="rgb(208,96,46)" fg:x="365" fg:w="2"/><text x="84.1580%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.46%)</title><rect x="83.9080%" y="229" width="0.4598%" height="15" fill="rgb(239,3,39)" fg:x="365" fg:w="2"/><text x="84.1580%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.46%)</title><rect x="83.9080%" y="213" width="0.4598%" height="15" fill="rgb(233,210,1)" fg:x="365" fg:w="2"/><text x="84.1580%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.46%)</title><rect x="83.9080%" y="197" width="0.4598%" height="15" fill="rgb(244,137,37)" fg:x="365" fg:w="2"/><text x="84.1580%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.46%)</title><rect x="83.9080%" y="181" width="0.4598%" height="15" fill="rgb(240,136,2)" fg:x="365" fg:w="2"/><text x="84.1580%" y="191.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.46%)</title><rect x="83.9080%" y="165" width="0.4598%" height="15" fill="rgb(239,18,37)" fg:x="365" fg:w="2"/><text x="84.1580%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.23%)</title><rect x="84.3678%" y="325" width="0.2299%" height="15" fill="rgb(218,185,22)" fg:x="367" fg:w="1"/><text x="84.6178%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.23%)</title><rect x="84.3678%" y="309" width="0.2299%" height="15" fill="rgb(225,218,4)" fg:x="367" fg:w="1"/><text x="84.6178%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="84.3678%" y="293" width="0.2299%" height="15" fill="rgb(230,182,32)" fg:x="367" fg:w="1"/><text x="84.6178%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.46%)</title><rect x="84.3678%" y="485" width="0.4598%" height="15" fill="rgb(242,56,43)" fg:x="367" fg:w="2"/><text x="84.6178%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="84.3678%" y="469" width="0.4598%" height="15" fill="rgb(233,99,24)" fg:x="367" fg:w="2"/><text x="84.6178%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.46%)</title><rect x="84.3678%" y="453" width="0.4598%" height="15" fill="rgb(234,209,42)" fg:x="367" fg:w="2"/><text x="84.6178%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (2 samples, 0.46%)</title><rect x="84.3678%" y="437" width="0.4598%" height="15" fill="rgb(227,7,12)" fg:x="367" fg:w="2"/><text x="84.6178%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="84.3678%" y="421" width="0.4598%" height="15" fill="rgb(245,203,43)" fg:x="367" fg:w="2"/><text x="84.6178%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (2 samples, 0.46%)</title><rect x="84.3678%" y="405" width="0.4598%" height="15" fill="rgb(238,205,33)" fg:x="367" fg:w="2"/><text x="84.6178%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.46%)</title><rect x="84.3678%" y="389" width="0.4598%" height="15" fill="rgb(231,56,7)" fg:x="367" fg:w="2"/><text x="84.6178%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="84.3678%" y="373" width="0.4598%" height="15" fill="rgb(244,186,29)" fg:x="367" fg:w="2"/><text x="84.6178%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="84.3678%" y="357" width="0.4598%" height="15" fill="rgb(234,111,31)" fg:x="367" fg:w="2"/><text x="84.6178%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="84.3678%" y="341" width="0.4598%" height="15" fill="rgb(241,149,10)" fg:x="367" fg:w="2"/><text x="84.6178%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.23%)</title><rect x="84.5977%" y="325" width="0.2299%" height="15" fill="rgb(249,206,44)" fg:x="368" fg:w="1"/><text x="84.8477%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.23%)</title><rect x="84.5977%" y="309" width="0.2299%" height="15" fill="rgb(251,153,30)" fg:x="368" fg:w="1"/><text x="84.8477%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.23%)</title><rect x="84.5977%" y="293" width="0.2299%" height="15" fill="rgb(239,152,38)" fg:x="368" fg:w="1"/><text x="84.8477%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.23%)</title><rect x="85.5172%" y="421" width="0.2299%" height="15" fill="rgb(249,139,47)" fg:x="372" fg:w="1"/><text x="85.7672%" y="431.50"></text></g><g><title>__free_tcb (1 samples, 0.23%)</title><rect x="85.7471%" y="421" width="0.2299%" height="15" fill="rgb(244,64,35)" fg:x="373" fg:w="1"/><text x="85.9971%" y="431.50"></text></g><g><title>__deallocate_stack (1 samples, 0.23%)</title><rect x="85.7471%" y="405" width="0.2299%" height="15" fill="rgb(216,46,15)" fg:x="373" fg:w="1"/><text x="85.9971%" y="415.50"></text></g><g><title>multi_thread_hashing::multi_threaded_hash_parking_lot (12 samples, 2.76%)</title><rect x="83.4483%" y="501" width="2.7586%" height="15" fill="rgb(250,74,19)" fg:x="363" fg:w="12"/><text x="83.6983%" y="511.50">mu..</text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (6 samples, 1.38%)</title><rect x="84.8276%" y="485" width="1.3793%" height="15" fill="rgb(249,42,33)" fg:x="369" fg:w="6"/><text x="85.0776%" y="495.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (6 samples, 1.38%)</title><rect x="84.8276%" y="469" width="1.3793%" height="15" fill="rgb(242,149,17)" fg:x="369" fg:w="6"/><text x="85.0776%" y="479.50"></text></g><g><title>std::sys::unix::thread::Thread::join (6 samples, 1.38%)</title><rect x="84.8276%" y="453" width="1.3793%" height="15" fill="rgb(244,29,21)" fg:x="369" fg:w="6"/><text x="85.0776%" y="463.50"></text></g><g><title>__pthread_clockjoin_ex (6 samples, 1.38%)</title><rect x="84.8276%" y="437" width="1.3793%" height="15" fill="rgb(220,130,37)" fg:x="369" fg:w="6"/><text x="85.0776%" y="447.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.23%)</title><rect x="85.9770%" y="421" width="0.2299%" height="15" fill="rgb(211,67,2)" fg:x="374" fg:w="1"/><text x="86.2270%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.46%)</title><rect x="86.2069%" y="389" width="0.4598%" height="15" fill="rgb(235,68,52)" fg:x="375" fg:w="2"/><text x="86.4569%" y="399.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.46%)</title><rect x="86.2069%" y="373" width="0.4598%" height="15" fill="rgb(246,142,3)" fg:x="375" fg:w="2"/><text x="86.4569%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (1 samples, 0.23%)</title><rect x="86.4368%" y="357" width="0.2299%" height="15" fill="rgb(241,25,7)" fg:x="376" fg:w="1"/><text x="86.6868%" y="367.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (1 samples, 0.23%)</title><rect x="86.4368%" y="341" width="0.2299%" height="15" fill="rgb(242,119,39)" fg:x="376" fg:w="1"/><text x="86.6868%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1 samples, 0.23%)</title><rect x="86.4368%" y="325" width="0.2299%" height="15" fill="rgb(241,98,45)" fg:x="376" fg:w="1"/><text x="86.6868%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1 samples, 0.23%)</title><rect x="86.4368%" y="309" width="0.2299%" height="15" fill="rgb(254,28,30)" fg:x="376" fg:w="1"/><text x="86.6868%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.23%)</title><rect x="86.4368%" y="293" width="0.2299%" height="15" fill="rgb(241,142,54)" fg:x="376" fg:w="1"/><text x="86.6868%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.23%)</title><rect x="86.4368%" y="277" width="0.2299%" height="15" fill="rgb(222,85,15)" fg:x="376" fg:w="1"/><text x="86.6868%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.23%)</title><rect x="86.4368%" y="261" width="0.2299%" height="15" fill="rgb(210,85,47)" fg:x="376" fg:w="1"/><text x="86.6868%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.69%)</title><rect x="86.2069%" y="485" width="0.6897%" height="15" fill="rgb(224,206,25)" fg:x="375" fg:w="3"/><text x="86.4569%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.69%)</title><rect x="86.2069%" y="469" width="0.6897%" height="15" fill="rgb(243,201,19)" fg:x="375" fg:w="3"/><text x="86.4569%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.69%)</title><rect x="86.2069%" y="453" width="0.6897%" height="15" fill="rgb(236,59,4)" fg:x="375" fg:w="3"/><text x="86.4569%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.69%)</title><rect x="86.2069%" y="437" width="0.6897%" height="15" fill="rgb(254,179,45)" fg:x="375" fg:w="3"/><text x="86.4569%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.69%)</title><rect x="86.2069%" y="421" width="0.6897%" height="15" fill="rgb(226,14,10)" fg:x="375" fg:w="3"/><text x="86.4569%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.69%)</title><rect x="86.2069%" y="405" width="0.6897%" height="15" fill="rgb(244,27,41)" fg:x="375" fg:w="3"/><text x="86.4569%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.23%)</title><rect x="86.6667%" y="389" width="0.2299%" height="15" fill="rgb(235,35,32)" fg:x="377" fg:w="1"/><text x="86.9167%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.46%)</title><rect x="86.8966%" y="485" width="0.4598%" height="15" fill="rgb(218,68,31)" fg:x="378" fg:w="2"/><text x="87.1466%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="86.8966%" y="469" width="0.4598%" height="15" fill="rgb(207,120,37)" fg:x="378" fg:w="2"/><text x="87.1466%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.46%)</title><rect x="86.8966%" y="453" width="0.4598%" height="15" fill="rgb(227,98,0)" fg:x="378" fg:w="2"/><text x="87.1466%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (2 samples, 0.46%)</title><rect x="86.8966%" y="437" width="0.4598%" height="15" fill="rgb(207,7,3)" fg:x="378" fg:w="2"/><text x="87.1466%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="86.8966%" y="421" width="0.4598%" height="15" fill="rgb(206,98,19)" fg:x="378" fg:w="2"/><text x="87.1466%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (2 samples, 0.46%)</title><rect x="86.8966%" y="405" width="0.4598%" height="15" fill="rgb(217,5,26)" fg:x="378" fg:w="2"/><text x="87.1466%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.46%)</title><rect x="86.8966%" y="389" width="0.4598%" height="15" fill="rgb(235,190,38)" fg:x="378" fg:w="2"/><text x="87.1466%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="86.8966%" y="373" width="0.4598%" height="15" fill="rgb(247,86,24)" fg:x="378" fg:w="2"/><text x="87.1466%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.46%)</title><rect x="86.8966%" y="357" width="0.4598%" height="15" fill="rgb(205,101,16)" fg:x="378" fg:w="2"/><text x="87.1466%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="86.8966%" y="341" width="0.4598%" height="15" fill="rgb(246,168,33)" fg:x="378" fg:w="2"/><text x="87.1466%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.46%)</title><rect x="86.8966%" y="325" width="0.4598%" height="15" fill="rgb(231,114,1)" fg:x="378" fg:w="2"/><text x="87.1466%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.46%)</title><rect x="86.8966%" y="309" width="0.4598%" height="15" fill="rgb(207,184,53)" fg:x="378" fg:w="2"/><text x="87.1466%" y="319.50"></text></g><g><title>__GI___libc_free (2 samples, 0.46%)</title><rect x="86.8966%" y="293" width="0.4598%" height="15" fill="rgb(224,95,51)" fg:x="378" fg:w="2"/><text x="87.1466%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="87.3563%" y="389" width="0.2299%" height="15" fill="rgb(212,188,45)" fg:x="380" fg:w="1"/><text x="87.6063%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(u32,alloc::string::String)]&gt; (1 samples, 0.23%)</title><rect x="87.3563%" y="373" width="0.2299%" height="15" fill="rgb(223,154,38)" fg:x="380" fg:w="1"/><text x="87.6063%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,alloc::string::String)&gt; (1 samples, 0.23%)</title><rect x="87.3563%" y="357" width="0.2299%" height="15" fill="rgb(251,22,52)" fg:x="380" fg:w="1"/><text x="87.6063%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.23%)</title><rect x="87.3563%" y="341" width="0.2299%" height="15" fill="rgb(229,209,22)" fg:x="380" fg:w="1"/><text x="87.6063%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.23%)</title><rect x="87.3563%" y="325" width="0.2299%" height="15" fill="rgb(234,138,34)" fg:x="380" fg:w="1"/><text x="87.6063%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.23%)</title><rect x="87.3563%" y="309" width="0.2299%" height="15" fill="rgb(212,95,11)" fg:x="380" fg:w="1"/><text x="87.6063%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="87.3563%" y="293" width="0.2299%" height="15" fill="rgb(240,179,47)" fg:x="380" fg:w="1"/><text x="87.6063%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.23%)</title><rect x="87.3563%" y="277" width="0.2299%" height="15" fill="rgb(240,163,11)" fg:x="380" fg:w="1"/><text x="87.6063%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.23%)</title><rect x="87.3563%" y="261" width="0.2299%" height="15" fill="rgb(236,37,12)" fg:x="380" fg:w="1"/><text x="87.6063%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="87.3563%" y="245" width="0.2299%" height="15" fill="rgb(232,164,16)" fg:x="380" fg:w="1"/><text x="87.6063%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;(u32,alloc::string::String)&gt;&gt;&gt;&gt; (2 samples, 0.46%)</title><rect x="87.3563%" y="485" width="0.4598%" height="15" fill="rgb(244,205,15)" fg:x="380" fg:w="2"/><text x="87.6063%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.46%)</title><rect x="87.3563%" y="469" width="0.4598%" height="15" fill="rgb(223,117,47)" fg:x="380" fg:w="2"/><text x="87.6063%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.46%)</title><rect x="87.3563%" y="453" width="0.4598%" height="15" fill="rgb(244,107,35)" fg:x="380" fg:w="2"/><text x="87.6063%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::Mutex&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;(u32,alloc::string::String)&gt;&gt;&gt; (2 samples, 0.46%)</title><rect x="87.3563%" y="437" width="0.4598%" height="15" fill="rgb(205,140,8)" fg:x="380" fg:w="2"/><text x="87.6063%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;(u32,alloc::string::String)&gt;&gt;&gt; (2 samples, 0.46%)</title><rect x="87.3563%" y="421" width="0.4598%" height="15" fill="rgb(228,84,46)" fg:x="380" fg:w="2"/><text x="87.6063%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u32,alloc::string::String)&gt;&gt; (2 samples, 0.46%)</title><rect x="87.3563%" y="405" width="0.4598%" height="15" fill="rgb(254,188,9)" fg:x="380" fg:w="2"/><text x="87.6063%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u32,alloc::string::String)&gt;&gt; (1 samples, 0.23%)</title><rect x="87.5862%" y="389" width="0.2299%" height="15" fill="rgb(206,112,54)" fg:x="381" fg:w="1"/><text x="87.8362%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="87.5862%" y="373" width="0.2299%" height="15" fill="rgb(216,84,49)" fg:x="381" fg:w="1"/><text x="87.8362%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.23%)</title><rect x="87.5862%" y="357" width="0.2299%" height="15" fill="rgb(214,194,35)" fg:x="381" fg:w="1"/><text x="87.8362%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.23%)</title><rect x="87.5862%" y="341" width="0.2299%" height="15" fill="rgb(249,28,3)" fg:x="381" fg:w="1"/><text x="87.8362%" y="351.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="87.5862%" y="325" width="0.2299%" height="15" fill="rgb(222,56,52)" fg:x="381" fg:w="1"/><text x="87.8362%" y="335.50"></text></g><g><title>malloc_consolidate (1 samples, 0.23%)</title><rect x="87.5862%" y="309" width="0.2299%" height="15" fill="rgb(245,217,50)" fg:x="381" fg:w="1"/><text x="87.8362%" y="319.50"></text></g><g><title>multi_thread_hashing::multi_threaded_hash_std (8 samples, 1.84%)</title><rect x="86.2069%" y="501" width="1.8391%" height="15" fill="rgb(213,201,24)" fg:x="375" fg:w="8"/><text x="86.4569%" y="511.50">m..</text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::new (1 samples, 0.23%)</title><rect x="87.8161%" y="485" width="0.2299%" height="15" fill="rgb(248,116,28)" fg:x="382" fg:w="1"/><text x="88.0661%" y="495.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::with_capacity (1 samples, 0.23%)</title><rect x="87.8161%" y="469" width="0.2299%" height="15" fill="rgb(219,72,43)" fg:x="382" fg:w="1"/><text x="88.0661%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::with_capacity (1 samples, 0.23%)</title><rect x="87.8161%" y="453" width="0.2299%" height="15" fill="rgb(209,138,14)" fg:x="382" fg:w="1"/><text x="88.0661%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;[T]&gt;::new_uninit_slice (1 samples, 0.23%)</title><rect x="87.8161%" y="437" width="0.2299%" height="15" fill="rgb(222,18,33)" fg:x="382" fg:w="1"/><text x="88.0661%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="87.8161%" y="421" width="0.2299%" height="15" fill="rgb(213,199,7)" fg:x="382" fg:w="1"/><text x="88.0661%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="87.8161%" y="405" width="0.2299%" height="15" fill="rgb(250,110,10)" fg:x="382" fg:w="1"/><text x="88.0661%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="87.8161%" y="389" width="0.2299%" height="15" fill="rgb(248,123,6)" fg:x="382" fg:w="1"/><text x="88.0661%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.23%)</title><rect x="87.8161%" y="373" width="0.2299%" height="15" fill="rgb(206,91,31)" fg:x="382" fg:w="1"/><text x="88.0661%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="87.8161%" y="357" width="0.2299%" height="15" fill="rgb(211,154,13)" fg:x="382" fg:w="1"/><text x="88.0661%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="87.8161%" y="341" width="0.2299%" height="15" fill="rgb(225,148,7)" fg:x="382" fg:w="1"/><text x="88.0661%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="87.8161%" y="325" width="0.2299%" height="15" fill="rgb(220,160,43)" fg:x="382" fg:w="1"/><text x="88.0661%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="87.8161%" y="309" width="0.2299%" height="15" fill="rgb(213,52,39)" fg:x="382" fg:w="1"/><text x="88.0661%" y="319.50"></text></g><g><title>malloc_consolidate (1 samples, 0.23%)</title><rect x="87.8161%" y="293" width="0.2299%" height="15" fill="rgb(243,137,7)" fg:x="382" fg:w="1"/><text x="88.0661%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="88.0460%" y="485" width="0.2299%" height="15" fill="rgb(230,79,13)" fg:x="383" fg:w="1"/><text x="88.2960%" y="495.50"></text></g><g><title>core::ptr::read (1 samples, 0.23%)</title><rect x="88.0460%" y="469" width="0.2299%" height="15" fill="rgb(247,105,23)" fg:x="383" fg:w="1"/><text x="88.2960%" y="479.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.23%)</title><rect x="88.0460%" y="453" width="0.2299%" height="15" fill="rgb(223,179,41)" fg:x="383" fg:w="1"/><text x="88.2960%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.23%)</title><rect x="88.2759%" y="485" width="0.2299%" height="15" fill="rgb(218,9,34)" fg:x="384" fg:w="1"/><text x="88.5259%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.23%)</title><rect x="88.2759%" y="469" width="0.2299%" height="15" fill="rgb(222,106,8)" fg:x="384" fg:w="1"/><text x="88.5259%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.23%)</title><rect x="88.2759%" y="453" width="0.2299%" height="15" fill="rgb(211,220,0)" fg:x="384" fg:w="1"/><text x="88.5259%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.46%)</title><rect x="88.5057%" y="389" width="0.4598%" height="15" fill="rgb(229,52,16)" fg:x="385" fg:w="2"/><text x="88.7557%" y="399.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.46%)</title><rect x="88.5057%" y="373" width="0.4598%" height="15" fill="rgb(212,155,18)" fg:x="385" fg:w="2"/><text x="88.7557%" y="383.50"></text></g><g><title>std::io::BufRead::read_line (2 samples, 0.46%)</title><rect x="88.5057%" y="357" width="0.4598%" height="15" fill="rgb(242,21,14)" fg:x="385" fg:w="2"/><text x="88.7557%" y="367.50"></text></g><g><title>std::io::append_to_string (2 samples, 0.46%)</title><rect x="88.5057%" y="341" width="0.4598%" height="15" fill="rgb(222,19,48)" fg:x="385" fg:w="2"/><text x="88.7557%" y="351.50"></text></g><g><title>std::io::BufRead::read_line::{{closure}} (1 samples, 0.23%)</title><rect x="88.7356%" y="325" width="0.2299%" height="15" fill="rgb(232,45,27)" fg:x="386" fg:w="1"/><text x="88.9856%" y="335.50"></text></g><g><title>std::io::read_until (1 samples, 0.23%)</title><rect x="88.7356%" y="309" width="0.2299%" height="15" fill="rgb(249,103,42)" fg:x="386" fg:w="1"/><text x="88.9856%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.23%)</title><rect x="88.7356%" y="293" width="0.2299%" height="15" fill="rgb(246,81,33)" fg:x="386" fg:w="1"/><text x="88.9856%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.23%)</title><rect x="88.7356%" y="277" width="0.2299%" height="15" fill="rgb(252,33,42)" fg:x="386" fg:w="1"/><text x="88.9856%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.23%)</title><rect x="88.7356%" y="261" width="0.2299%" height="15" fill="rgb(209,212,41)" fg:x="386" fg:w="1"/><text x="88.9856%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="88.7356%" y="245" width="0.2299%" height="15" fill="rgb(207,154,6)" fg:x="386" fg:w="1"/><text x="88.9856%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="88.7356%" y="229" width="0.2299%" height="15" fill="rgb(223,64,47)" fg:x="386" fg:w="1"/><text x="88.9856%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.23%)</title><rect x="88.7356%" y="213" width="0.2299%" height="15" fill="rgb(211,161,38)" fg:x="386" fg:w="1"/><text x="88.9856%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.23%)</title><rect x="88.7356%" y="197" width="0.2299%" height="15" fill="rgb(219,138,40)" fg:x="386" fg:w="1"/><text x="88.9856%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.23%)</title><rect x="88.7356%" y="181" width="0.2299%" height="15" fill="rgb(241,228,46)" fg:x="386" fg:w="1"/><text x="88.9856%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="88.7356%" y="165" width="0.2299%" height="15" fill="rgb(223,209,38)" fg:x="386" fg:w="1"/><text x="88.9856%" y="175.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="88.7356%" y="149" width="0.2299%" height="15" fill="rgb(236,164,45)" fg:x="386" fg:w="1"/><text x="88.9856%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.69%)</title><rect x="88.5057%" y="485" width="0.6897%" height="15" fill="rgb(231,15,5)" fg:x="385" fg:w="3"/><text x="88.7557%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.69%)</title><rect x="88.5057%" y="469" width="0.6897%" height="15" fill="rgb(252,35,15)" fg:x="385" fg:w="3"/><text x="88.7557%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.69%)</title><rect x="88.5057%" y="453" width="0.6897%" height="15" fill="rgb(248,181,18)" fg:x="385" fg:w="3"/><text x="88.7557%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.69%)</title><rect x="88.5057%" y="437" width="0.6897%" height="15" fill="rgb(233,39,42)" fg:x="385" fg:w="3"/><text x="88.7557%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.69%)</title><rect x="88.5057%" y="421" width="0.6897%" height="15" fill="rgb(238,110,33)" fg:x="385" fg:w="3"/><text x="88.7557%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.69%)</title><rect x="88.5057%" y="405" width="0.6897%" height="15" fill="rgb(233,195,10)" fg:x="385" fg:w="3"/><text x="88.7557%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.23%)</title><rect x="88.9655%" y="389" width="0.2299%" height="15" fill="rgb(254,105,3)" fg:x="387" fg:w="1"/><text x="89.2155%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u32,alloc::string::String)&gt;&gt; (1 samples, 0.23%)</title><rect x="89.1954%" y="485" width="0.2299%" height="15" fill="rgb(221,225,9)" fg:x="388" fg:w="1"/><text x="89.4454%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="89.1954%" y="469" width="0.2299%" height="15" fill="rgb(224,227,45)" fg:x="388" fg:w="1"/><text x="89.4454%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(u32,alloc::string::String)]&gt; (1 samples, 0.23%)</title><rect x="89.1954%" y="453" width="0.2299%" height="15" fill="rgb(229,198,43)" fg:x="388" fg:w="1"/><text x="89.4454%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,alloc::string::String)&gt; (1 samples, 0.23%)</title><rect x="89.1954%" y="437" width="0.2299%" height="15" fill="rgb(206,209,35)" fg:x="388" fg:w="1"/><text x="89.4454%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.23%)</title><rect x="89.1954%" y="421" width="0.2299%" height="15" fill="rgb(245,195,53)" fg:x="388" fg:w="1"/><text x="89.4454%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.23%)</title><rect x="89.1954%" y="405" width="0.2299%" height="15" fill="rgb(240,92,26)" fg:x="388" fg:w="1"/><text x="89.4454%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.23%)</title><rect x="89.1954%" y="389" width="0.2299%" height="15" fill="rgb(207,40,23)" fg:x="388" fg:w="1"/><text x="89.4454%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="89.1954%" y="373" width="0.2299%" height="15" fill="rgb(223,111,35)" fg:x="388" fg:w="1"/><text x="89.4454%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.23%)</title><rect x="89.1954%" y="357" width="0.2299%" height="15" fill="rgb(229,147,28)" fg:x="388" fg:w="1"/><text x="89.4454%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.23%)</title><rect x="89.1954%" y="341" width="0.2299%" height="15" fill="rgb(211,29,28)" fg:x="388" fg:w="1"/><text x="89.4454%" y="351.50"></text></g><g><title>__GI___libc_free (1 samples, 0.23%)</title><rect x="89.1954%" y="325" width="0.2299%" height="15" fill="rgb(228,72,33)" fg:x="388" fg:w="1"/><text x="89.4454%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="89.6552%" y="277" width="0.2299%" height="15" fill="rgb(205,214,31)" fg:x="390" fg:w="1"/><text x="89.9052%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.23%)</title><rect x="89.8851%" y="261" width="0.2299%" height="15" fill="rgb(224,111,15)" fg:x="391" fg:w="1"/><text x="90.1351%" y="271.50"></text></g><g><title>sha2::sha256::soft::sha256msg1 (3 samples, 0.69%)</title><rect x="90.1149%" y="245" width="0.6897%" height="15" fill="rgb(253,21,26)" fg:x="392" fg:w="3"/><text x="90.3649%" y="255.50"></text></g><g><title>sha2::sha256::soft::sha256msg1::sigma0x4 (3 samples, 0.69%)</title><rect x="90.1149%" y="229" width="0.6897%" height="15" fill="rgb(245,139,43)" fg:x="392" fg:w="3"/><text x="90.3649%" y="239.50"></text></g><g><title>sha2::sha256::soft::or (3 samples, 0.69%)</title><rect x="90.1149%" y="213" width="0.6897%" height="15" fill="rgb(252,170,7)" fg:x="392" fg:w="3"/><text x="90.3649%" y="223.50"></text></g><g><title>sha2::sha256::soft::schedule (5 samples, 1.15%)</title><rect x="90.1149%" y="261" width="1.1494%" height="15" fill="rgb(231,118,14)" fg:x="392" fg:w="5"/><text x="90.3649%" y="271.50"></text></g><g><title>sha2::sha256::soft::sha256msg2 (2 samples, 0.46%)</title><rect x="90.8046%" y="245" width="0.4598%" height="15" fill="rgb(238,83,0)" fg:x="395" fg:w="2"/><text x="91.0546%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (2 samples, 0.46%)</title><rect x="90.8046%" y="229" width="0.4598%" height="15" fill="rgb(221,39,39)" fg:x="395" fg:w="2"/><text x="91.0546%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (6 samples, 1.38%)</title><rect x="92.6437%" y="245" width="1.3793%" height="15" fill="rgb(222,119,46)" fg:x="403" fg:w="6"/><text x="92.8937%" y="255.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (22 samples, 5.06%)</title><rect x="89.6552%" y="437" width="5.0575%" height="15" fill="rgb(222,165,49)" fg:x="390" fg:w="22"/><text x="89.9052%" y="447.50">&lt;D as ..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (22 samples, 5.06%)</title><rect x="89.6552%" y="421" width="5.0575%" height="15" fill="rgb(219,113,52)" fg:x="390" fg:w="22"/><text x="89.9052%" y="431.50">digest..</text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (22 samples, 5.06%)</title><rect x="89.6552%" y="405" width="5.0575%" height="15" fill="rgb(214,7,15)" fg:x="390" fg:w="22"/><text x="89.9052%" y="415.50">&lt;D as ..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (22 samples, 5.06%)</title><rect x="89.6552%" y="389" width="5.0575%" height="15" fill="rgb(235,32,4)" fg:x="390" fg:w="22"/><text x="89.9052%" y="399.50">&lt;sha2:..</text></g><g><title>sha2::sha256::Engine256::finish (22 samples, 5.06%)</title><rect x="89.6552%" y="373" width="5.0575%" height="15" fill="rgb(238,90,54)" fg:x="390" fg:w="22"/><text x="89.9052%" y="383.50">sha2::..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (22 samples, 5.06%)</title><rect x="89.6552%" y="357" width="5.0575%" height="15" fill="rgb(213,208,19)" fg:x="390" fg:w="22"/><text x="89.9052%" y="367.50">block_..</text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (22 samples, 5.06%)</title><rect x="89.6552%" y="341" width="5.0575%" height="15" fill="rgb(233,156,4)" fg:x="390" fg:w="22"/><text x="89.9052%" y="351.50">sha2::..</text></g><g><title>sha2::sha256::compress256 (22 samples, 5.06%)</title><rect x="89.6552%" y="325" width="5.0575%" height="15" fill="rgb(207,194,5)" fg:x="390" fg:w="22"/><text x="89.9052%" y="335.50">sha2::..</text></g><g><title>sha2::sha256::x86::compress (22 samples, 5.06%)</title><rect x="89.6552%" y="309" width="5.0575%" height="15" fill="rgb(206,111,30)" fg:x="390" fg:w="22"/><text x="89.9052%" y="319.50">sha2::..</text></g><g><title>sha2::sha256::soft::compress (22 samples, 5.06%)</title><rect x="89.6552%" y="293" width="5.0575%" height="15" fill="rgb(243,70,54)" fg:x="390" fg:w="22"/><text x="89.9052%" y="303.50">sha2::..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (21 samples, 4.83%)</title><rect x="89.8851%" y="277" width="4.8276%" height="15" fill="rgb(242,28,8)" fg:x="391" fg:w="21"/><text x="90.1351%" y="287.50">sha2::..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (15 samples, 3.45%)</title><rect x="91.2644%" y="261" width="3.4483%" height="15" fill="rgb(219,106,18)" fg:x="397" fg:w="15"/><text x="91.5144%" y="271.50">sha..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (3 samples, 0.69%)</title><rect x="94.0230%" y="245" width="0.6897%" height="15" fill="rgb(244,222,10)" fg:x="409" fg:w="3"/><text x="94.2730%" y="255.50"></text></g><g><title>alloc::string::String::reserve (3 samples, 0.69%)</title><rect x="95.4023%" y="341" width="0.6897%" height="15" fill="rgb(236,179,52)" fg:x="415" fg:w="3"/><text x="95.6523%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.69%)</title><rect x="95.4023%" y="325" width="0.6897%" height="15" fill="rgb(213,23,39)" fg:x="415" fg:w="3"/><text x="95.6523%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.69%)</title><rect x="95.4023%" y="309" width="0.6897%" height="15" fill="rgb(238,48,10)" fg:x="415" fg:w="3"/><text x="95.6523%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.69%)</title><rect x="95.4023%" y="293" width="0.6897%" height="15" fill="rgb(251,196,23)" fg:x="415" fg:w="3"/><text x="95.6523%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.69%)</title><rect x="95.4023%" y="277" width="0.6897%" height="15" fill="rgb(250,152,24)" fg:x="415" fg:w="3"/><text x="95.6523%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.69%)</title><rect x="95.4023%" y="261" width="0.6897%" height="15" fill="rgb(209,150,17)" fg:x="415" fg:w="3"/><text x="95.6523%" y="271.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.69%)</title><rect x="95.4023%" y="245" width="0.6897%" height="15" fill="rgb(234,202,34)" fg:x="415" fg:w="3"/><text x="95.6523%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="95.8621%" y="229" width="0.2299%" height="15" fill="rgb(253,148,53)" fg:x="417" fg:w="1"/><text x="96.1121%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.92%)</title><rect x="96.7816%" y="293" width="0.9195%" height="15" fill="rgb(218,129,16)" fg:x="421" fg:w="4"/><text x="97.0316%" y="303.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.92%)</title><rect x="96.7816%" y="277" width="0.9195%" height="15" fill="rgb(216,85,19)" fg:x="421" fg:w="4"/><text x="97.0316%" y="287.50"></text></g><g><title>&lt;&amp;u8 as core::ops::bit::BitAnd&lt;u8&gt;&gt;::bitand (2 samples, 0.46%)</title><rect x="97.2414%" y="261" width="0.4598%" height="15" fill="rgb(235,228,7)" fg:x="423" fg:w="2"/><text x="97.4914%" y="271.50"></text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (2 samples, 0.46%)</title><rect x="97.2414%" y="245" width="0.4598%" height="15" fill="rgb(245,175,0)" fg:x="423" fg:w="2"/><text x="97.4914%" y="255.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.61%)</title><rect x="96.3218%" y="309" width="1.6092%" height="15" fill="rgb(208,168,36)" fg:x="419" fg:w="7"/><text x="96.5718%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.23%)</title><rect x="97.7011%" y="293" width="0.2299%" height="15" fill="rgb(246,171,24)" fg:x="425" fg:w="1"/><text x="97.9511%" y="303.50"></text></g><g><title>core::mem::replace (1 samples, 0.23%)</title><rect x="97.7011%" y="277" width="0.2299%" height="15" fill="rgb(215,142,24)" fg:x="425" fg:w="1"/><text x="97.9511%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.23%)</title><rect x="97.7011%" y="261" width="0.2299%" height="15" fill="rgb(250,187,7)" fg:x="425" fg:w="1"/><text x="97.9511%" y="271.50"></text></g><g><title>__libc_start_main (70 samples, 16.09%)</title><rect x="83.4483%" y="741" width="16.0920%" height="15" fill="rgb(228,66,33)" fg:x="363" fg:w="70"/><text x="83.6983%" y="751.50">__libc_start_main</text></g><g><title>main (70 samples, 16.09%)</title><rect x="83.4483%" y="725" width="16.0920%" height="15" fill="rgb(234,215,21)" fg:x="363" fg:w="70"/><text x="83.6983%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (70 samples, 16.09%)</title><rect x="83.4483%" y="709" width="16.0920%" height="15" fill="rgb(222,191,20)" fg:x="363" fg:w="70"/><text x="83.6983%" y="719.50">std::rt::lang_start_inter..</text></g><g><title>std::panic::catch_unwind (70 samples, 16.09%)</title><rect x="83.4483%" y="693" width="16.0920%" height="15" fill="rgb(245,79,54)" fg:x="363" fg:w="70"/><text x="83.6983%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (70 samples, 16.09%)</title><rect x="83.4483%" y="677" width="16.0920%" height="15" fill="rgb(240,10,37)" fg:x="363" fg:w="70"/><text x="83.6983%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (70 samples, 16.09%)</title><rect x="83.4483%" y="661" width="16.0920%" height="15" fill="rgb(214,192,32)" fg:x="363" fg:w="70"/><text x="83.6983%" y="671.50">std::panicking::try::do_c..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (70 samples, 16.09%)</title><rect x="83.4483%" y="645" width="16.0920%" height="15" fill="rgb(209,36,54)" fg:x="363" fg:w="70"/><text x="83.6983%" y="655.50">std::rt::lang_start_inter..</text></g><g><title>std::panic::catch_unwind (70 samples, 16.09%)</title><rect x="83.4483%" y="629" width="16.0920%" height="15" fill="rgb(220,10,11)" fg:x="363" fg:w="70"/><text x="83.6983%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (70 samples, 16.09%)</title><rect x="83.4483%" y="613" width="16.0920%" height="15" fill="rgb(221,106,17)" fg:x="363" fg:w="70"/><text x="83.6983%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (70 samples, 16.09%)</title><rect x="83.4483%" y="597" width="16.0920%" height="15" fill="rgb(251,142,44)" fg:x="363" fg:w="70"/><text x="83.6983%" y="607.50">std::panicking::try::do_c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (70 samples, 16.09%)</title><rect x="83.4483%" y="581" width="16.0920%" height="15" fill="rgb(238,13,15)" fg:x="363" fg:w="70"/><text x="83.6983%" y="591.50">core::ops::function::impl..</text></g><g><title>std::rt::lang_start::{{closure}} (70 samples, 16.09%)</title><rect x="83.4483%" y="565" width="16.0920%" height="15" fill="rgb(208,107,27)" fg:x="363" fg:w="70"/><text x="83.6983%" y="575.50">std::rt::lang_start::{{cl..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (70 samples, 16.09%)</title><rect x="83.4483%" y="549" width="16.0920%" height="15" fill="rgb(205,136,37)" fg:x="363" fg:w="70"/><text x="83.6983%" y="559.50">std::sys_common::backtrac..</text></g><g><title>core::ops::function::FnOnce::call_once (70 samples, 16.09%)</title><rect x="83.4483%" y="533" width="16.0920%" height="15" fill="rgb(250,205,27)" fg:x="363" fg:w="70"/><text x="83.6983%" y="543.50">core::ops::function::FnOn..</text></g><g><title>multi_thread_hashing::main (70 samples, 16.09%)</title><rect x="83.4483%" y="517" width="16.0920%" height="15" fill="rgb(210,80,43)" fg:x="363" fg:w="70"/><text x="83.6983%" y="527.50">multi_thread_hashing::main</text></g><g><title>multi_thread_hashing::single_threaded_hash (50 samples, 11.49%)</title><rect x="88.0460%" y="501" width="11.4943%" height="15" fill="rgb(247,160,36)" fg:x="383" fg:w="50"/><text x="88.2960%" y="511.50">multi_thread_hash..</text></g><g><title>sha256::digest (44 samples, 10.11%)</title><rect x="89.4253%" y="485" width="10.1149%" height="15" fill="rgb(234,13,49)" fg:x="389" fg:w="44"/><text x="89.6753%" y="495.50">sha256::digest</text></g><g><title>&lt;alloc::string::String as sha256::Sha256Digest&gt;::digest (44 samples, 10.11%)</title><rect x="89.4253%" y="469" width="10.1149%" height="15" fill="rgb(234,122,0)" fg:x="389" fg:w="44"/><text x="89.6753%" y="479.50">&lt;alloc::string:..</text></g><g><title>sha256::__digest__ (43 samples, 9.89%)</title><rect x="89.6552%" y="453" width="9.8851%" height="15" fill="rgb(207,146,38)" fg:x="390" fg:w="43"/><text x="89.9052%" y="463.50">sha256::__dige..</text></g><g><title>hex::encode (21 samples, 4.83%)</title><rect x="94.7126%" y="437" width="4.8276%" height="15" fill="rgb(207,177,25)" fg:x="412" fg:w="21"/><text x="94.9626%" y="447.50">hex::e..</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (21 samples, 4.83%)</title><rect x="94.7126%" y="421" width="4.8276%" height="15" fill="rgb(211,178,42)" fg:x="412" fg:w="21"/><text x="94.9626%" y="431.50">&lt;T as ..</text></g><g><title>hex::encode_to_iter (21 samples, 4.83%)</title><rect x="94.7126%" y="405" width="4.8276%" height="15" fill="rgb(230,69,54)" fg:x="412" fg:w="21"/><text x="94.9626%" y="415.50">hex::e..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 4.83%)</title><rect x="94.7126%" y="389" width="4.8276%" height="15" fill="rgb(214,135,41)" fg:x="412" fg:w="21"/><text x="94.9626%" y="399.50">core::..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (19 samples, 4.37%)</title><rect x="95.1724%" y="373" width="4.3678%" height="15" fill="rgb(237,67,25)" fg:x="414" fg:w="19"/><text x="95.4224%" y="383.50">&lt;allo..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (18 samples, 4.14%)</title><rect x="95.4023%" y="357" width="4.1379%" height="15" fill="rgb(222,189,50)" fg:x="415" fg:w="18"/><text x="95.6523%" y="367.50">&lt;allo..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 3.45%)</title><rect x="96.0920%" y="341" width="3.4483%" height="15" fill="rgb(245,148,34)" fg:x="418" fg:w="15"/><text x="96.3420%" y="351.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 3.45%)</title><rect x="96.0920%" y="325" width="3.4483%" height="15" fill="rgb(222,29,6)" fg:x="418" fg:w="15"/><text x="96.3420%" y="335.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (7 samples, 1.61%)</title><rect x="97.9310%" y="309" width="1.6092%" height="15" fill="rgb(221,189,43)" fg:x="426" fg:w="7"/><text x="98.1810%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (7 samples, 1.61%)</title><rect x="97.9310%" y="293" width="1.6092%" height="15" fill="rgb(207,36,27)" fg:x="426" fg:w="7"/><text x="98.1810%" y="303.50"></text></g><g><title>alloc::string::String::push (7 samples, 1.61%)</title><rect x="97.9310%" y="277" width="1.6092%" height="15" fill="rgb(217,90,24)" fg:x="426" fg:w="7"/><text x="98.1810%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 1.61%)</title><rect x="97.9310%" y="261" width="1.6092%" height="15" fill="rgb(224,66,35)" fg:x="426" fg:w="7"/><text x="98.1810%" y="271.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.23%)</title><rect x="99.5402%" y="709" width="0.2299%" height="15" fill="rgb(221,13,50)" fg:x="433" fg:w="1"/><text x="99.7902%" y="719.50"></text></g><g><title>all (435 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(236,68,49)" fg:x="0" fg:w="435"/><text x="0.2500%" y="799.50"></text></g><g><title>multi-thread-ha (435 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(229,146,28)" fg:x="0" fg:w="435"/><text x="0.2500%" y="783.50">multi-thread-ha</text></g><g><title>_start (77 samples, 17.70%)</title><rect x="82.2989%" y="757" width="17.7011%" height="15" fill="rgb(225,31,38)" fg:x="358" fg:w="77"/><text x="82.5489%" y="767.50">_start</text></g><g><title>_dl_start (2 samples, 0.46%)</title><rect x="99.5402%" y="741" width="0.4598%" height="15" fill="rgb(250,208,3)" fg:x="433" fg:w="2"/><text x="99.7902%" y="751.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.46%)</title><rect x="99.5402%" y="725" width="0.4598%" height="15" fill="rgb(246,54,23)" fg:x="433" fg:w="2"/><text x="99.7902%" y="735.50"></text></g><g><title>dl_main (1 samples, 0.23%)</title><rect x="99.7701%" y="709" width="0.2299%" height="15" fill="rgb(243,76,11)" fg:x="434" fg:w="1"/><text x="100.0201%" y="719.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.23%)</title><rect x="99.7701%" y="693" width="0.2299%" height="15" fill="rgb(245,21,50)" fg:x="434" fg:w="1"/><text x="100.0201%" y="703.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.23%)</title><rect x="99.7701%" y="677" width="0.2299%" height="15" fill="rgb(228,9,43)" fg:x="434" fg:w="1"/><text x="100.0201%" y="687.50"></text></g><g><title>do_lookup_x (1 samples, 0.23%)</title><rect x="99.7701%" y="661" width="0.2299%" height="15" fill="rgb(208,100,47)" fg:x="434" fg:w="1"/><text x="100.0201%" y="671.50"></text></g></svg></svg>